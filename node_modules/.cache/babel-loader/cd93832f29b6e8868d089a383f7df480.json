{"ast":null,"code":"import _slicedToArray from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Svenn\\xE6rn\\\\Desktop\\\\laddel-mvp\\\\frontend\\\\src\\\\components\\\\StartChargerOverlay.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport Overlay from \"./Overlay\";\nimport '../stylesheets/StartChargerOverlay.css';\nimport TimeSelector from \"./TimeSelector\";\nimport ChargerButton from \"./ChargerButton\";\nimport { useEffect, useRef, useState } from \"react\";\nimport getChargerOperatingMode from \"../services/charger/getChargerOperatingMode\";\nimport { STATES } from \"../misc/constants\";\nimport { startCharger } from \"../services/charger/startChargingService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar StartChargerOverlay = function StartChargerOverlay(_ref) {\n  _s();\n\n  var address = _ref.address,\n      chargerId = _ref.chargerId,\n      onClickClose = _ref.onClickClose;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      operatingMode = _useState2[0],\n      setOperatingMode = _useState2[1];\n\n  var waiting = useRef(true);\n  var newestDate = useRef(null);\n\n  var updateOperatingMode = function updateOperatingMode() {\n    waiting.current = true;\n    getChargerOperatingMode(chargerId).then(function (x) {\n      setOperatingMode(x.data.operatingMode);\n      waiting.current = false;\n    }).catch(function () {\n      setOperatingMode(STATES.ERROR);\n      waiting.current = false;\n    });\n  };\n\n  useEffect(function () {\n    updateOperatingMode();\n    var interval = setInterval(function () {\n      updateOperatingMode();\n    }, 10000);\n    return function () {\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Overlay, {\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        justifyContent: \"space-evenly\"\n      },\n      className: \"centerFlex startChargerOverlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: function onClick() {\n          return onClickClose();\n        },\n        className: \"close\",\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Start lading ved \", address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"laddelGreen\",\n          children: \"Lad til\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(TimeSelector, {\n          onDateChanged: function onDateChanged(e) {\n            newestDate.current = e;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(ChargerButton, {\n        waiting: waiting,\n        onClick: function onClick() {\n          startCharger(chargerId, newestDate.current.getTime()).then(function (x) {\n            console.log(x);\n          }).catch(function (error) {});\n        },\n        operatingMode: operatingMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(StartChargerOverlay, \"yIGvNfbbz4ke5MuZGF8Op0p0kgU=\");\n\n_c = StartChargerOverlay;\nexport default StartChargerOverlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartChargerOverlay\");","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/components/StartChargerOverlay.js"],"names":["Overlay","TimeSelector","ChargerButton","useEffect","useRef","useState","getChargerOperatingMode","STATES","startCharger","StartChargerOverlay","address","chargerId","onClickClose","operatingMode","setOperatingMode","waiting","newestDate","updateOperatingMode","current","then","x","data","catch","ERROR","interval","setInterval","clearInterval","justifyContent","width","e","getTime","console","log","error"],"mappings":"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","sourcesContent":["import Overlay from \"./Overlay\";\r\nimport '../stylesheets/StartChargerOverlay.css';\r\nimport TimeSelector from \"./TimeSelector\";\r\nimport ChargerButton from \"./ChargerButton\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport getChargerOperatingMode from \"../services/charger/getChargerOperatingMode\";\r\nimport {STATES} from \"../misc/constants\";\r\nimport {startCharger} from \"../services/charger/startChargingService\";\r\n\r\nconst StartChargerOverlay = ({address, chargerId, onClickClose}) => {\r\n\r\n    const [operatingMode, setOperatingMode] = useState(0);\r\n    const waiting = useRef(true);\r\n\r\n    let newestDate = useRef(null);\r\n\r\n    const updateOperatingMode = () => {\r\n        waiting.current = true;\r\n        getChargerOperatingMode(chargerId).then(x => {\r\n            setOperatingMode(x.data.operatingMode);\r\n            waiting.current = false;\r\n        }).catch(() => {\r\n            setOperatingMode(STATES.ERROR);\r\n            waiting.current = false;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateOperatingMode();\r\n        let interval = setInterval(() => {\r\n            updateOperatingMode();\r\n        }, 10000);\r\n\r\n        return (() => {\r\n            clearInterval(interval);\r\n        })\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Overlay content={\r\n            <div style={{justifyContent: \"space-evenly\"}} className=\"centerFlex startChargerOverlay\">\r\n                <span onClick={() => onClickClose()} className=\"close\">x</span>\r\n                <h3>Start lading ved {address}</h3>\r\n                <div style={{width: \"100%\"}}>\r\n                    <h3 className=\"laddelGreen\">Lad til</h3>\r\n                    <TimeSelector onDateChanged={(e) => {\r\n                        newestDate.current = e;\r\n                    }}/>\r\n                </div>\r\n                <ChargerButton waiting={waiting} onClick={() => {\r\n                    startCharger(chargerId, newestDate.current.getTime()).then(x => {\r\n                        console.log(x);\r\n                    }).catch(error => {\r\n\r\n                    });\r\n                }} operatingMode={operatingMode}/>\r\n            </div>\r\n        }/>\r\n    )\r\n}\r\n\r\nexport default StartChargerOverlay;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Svenn\\xE6rn\\\\Desktop\\\\laddel-mvp\\\\frontend\\\\src\\\\pages\\\\ChargerMapPage.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport history from \"../history\";\nimport { getSession } from \"../actions/sessionActions\";\nimport { getAllChargers } from \"../actions/mapActions\";\nimport Map from \"../components/Map\";\nimport ErrorBox from \"../components/ErrorBox\";\nimport '../stylesheets/ChargerMapPage.css';\nimport { StartCharger } from \"../services/charger/startChargingService\";\nimport { doPostAsync } from \"../services/http/http\";\nimport postPendingSession from \"../services/charger/postPendingSession\";\nimport getPendingSession from \"../services/charger/getPendingSession\";\n/**\r\n * @author Magnus & Sven\r\n * @version 06/08/2021\r\n * Page with Map-component.\r\n * Allows user to navigate a map and view chargers + availability status\r\n * Displays whether user has an active charging session.\r\n * @param props\r\n * @component\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ChargerMapPage = function ChargerMapPage(props) {\n  _s();\n\n  var session = props.session;\n  var mapError = props.map.fetchError;\n  var sessionError = props.session.fetchError;\n  var chargers = props.map.chargers;\n  var dispatch = useDispatch();\n  /**\r\n   * Async function that dispatches actions for getting all chargers\r\n   * and the users current session.\r\n   * @returns void\r\n   * @memberOf ChargerMapPage\r\n   */\n\n  var onLoad = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(getAllChargers());\n\n            case 2:\n              _context.next = 4;\n              return dispatch(getSession());\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onLoad() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      overlay = _useState2[0],\n      setOverlay = _useState2[1];\n\n  useEffect(function () {\n    var isMounted = true;\n\n    if (!(props.map.isLoading || props.session.isLoading)) {\n      onLoad();\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n  /**\r\n   * Sends the user to current active charger.\r\n   * @returns void\r\n   * @memberOf ChargerMapPage\r\n   */\n\n  var handleClick = function handleClick() {\n    history.push(\"/charger/\".concat(session.session.chargerID));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scopeContent\",\n    children: [overlay, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(Map, {\n        chargers: chargers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, _this), sessionError || mapError ? /*#__PURE__*/_jsxDEV(ErrorBox, {\n        error: \"Nettverksfeil. Trykk p\\xE5 knappen for \\xE5 laste inn p\\xE5 nytt.\",\n        handleClick: function handleClick() {\n          return onLoad();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, _this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapNavBar\",\n        children: session.session && session.isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#EAC43D\"\n          },\n          className: \"sessionButton\",\n          onClick: function onClick() {\n            return handleClick();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Lader ved\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 42\n            }, _this), session.session.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, _this) : session.session && session.isPending ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sessionButton\",\n          onClick: function onClick() {},\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Start lading ved\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 53\n            }, _this), session.session.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 33\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Velg en ledig lader p\\xE5 kartet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 33\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(ChargerMapPage, \"GDFhUdHmnjZjmMem/oSqmRqulY8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ChargerMapPage;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    session: state.session,\n    map: state.map,\n    auth: state.auth\n  };\n};\n\nexport default connect(mapStateToProps)(ChargerMapPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChargerMapPage\");","map":{"version":3,"sources":["C:/Users/Svenn√¶rn/Desktop/laddel-mvp/frontend/src/pages/ChargerMapPage.js"],"names":["React","useEffect","useRef","useState","connect","useDispatch","history","getSession","getAllChargers","Map","ErrorBox","StartCharger","doPostAsync","postPendingSession","getPendingSession","ChargerMapPage","props","session","mapError","map","fetchError","sessionError","chargers","dispatch","onLoad","overlay","setOverlay","isMounted","isLoading","handleClick","push","chargerID","isActive","backgroundColor","address","isPending","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\n\r\nimport history from \"../history\";\r\n\r\nimport {getSession} from \"../actions/sessionActions\";\r\nimport {getAllChargers} from \"../actions/mapActions\";\r\n\r\nimport Map from \"../components/Map\";\r\nimport ErrorBox from \"../components/ErrorBox\";\r\n\r\nimport '../stylesheets/ChargerMapPage.css';\r\nimport {StartCharger} from \"../services/charger/startChargingService\";\r\nimport {doPostAsync} from \"../services/http/http\";\r\nimport postPendingSession from \"../services/charger/postPendingSession\";\r\nimport getPendingSession from \"../services/charger/getPendingSession\";\r\n\r\n/**\r\n * @author Magnus & Sven\r\n * @version 06/08/2021\r\n * Page with Map-component.\r\n * Allows user to navigate a map and view chargers + availability status\r\n * Displays whether user has an active charging session.\r\n * @param props\r\n * @component\r\n */\r\nconst ChargerMapPage = (props) => {\r\n    const session = props.session;\r\n    const mapError = props.map.fetchError;\r\n    const sessionError = props.session.fetchError;\r\n    const chargers = props.map.chargers;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /**\r\n     * Async function that dispatches actions for getting all chargers\r\n     * and the users current session.\r\n     * @returns void\r\n     * @memberOf ChargerMapPage\r\n     */\r\n    const onLoad = async () => {\r\n        await dispatch(getAllChargers());\r\n        await dispatch(getSession());\r\n    };\r\n\r\n    const [overlay, setOverlay] = useState(null);\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        if (!(props.map.isLoading || props.session.isLoading)) {\r\n            onLoad();\r\n        }\r\n        return () => {\r\n            isMounted = false;\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Sends the user to current active charger.\r\n     * @returns void\r\n     * @memberOf ChargerMapPage\r\n     */\r\n    const handleClick = () => {\r\n        history.push(`/charger/${session.session.chargerID}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"scopeContent\">\r\n            {overlay}\r\n            <div className=\"box\">\r\n                <Map chargers={chargers}/>\r\n                {sessionError || mapError ?\r\n                    <ErrorBox error=\"Nettverksfeil. Trykk p√• knappen for √• laste inn p√• nytt.\"\r\n                              handleClick={() => onLoad()}/> : null}\r\n                <div className=\"mapNavBar\">\r\n                    {session.session && session.isActive ?\r\n                        <button style={{backgroundColor: \"#EAC43D\"}} className=\"sessionButton\" onClick={() => handleClick()}>\r\n                            <h4>Lader ved<br/>{session.session.address}</h4>\r\n                        </button>\r\n                        :\r\n                        session.session && session.isPending ?\r\n\r\n                            <button className=\"sessionButton\" onClick={() => {\r\n\r\n                            }}>\r\n                                <h4>Start lading ved<br/>{session.session.address}</h4>\r\n                            </button>\r\n                            :\r\n                            <div className=\"info\">\r\n                                <h4>Velg en ledig lader p√• kartet</h4>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        session: state.session,\r\n        map: state.map,\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nexport default (connect)(mapStateToProps)(ChargerMapPage);"]},"metadata":{},"sourceType":"module"}
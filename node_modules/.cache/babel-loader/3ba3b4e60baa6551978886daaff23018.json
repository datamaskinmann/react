{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ip, tomcatPort } from \"../misc/constants\";\nimport { fetchSession } from \"../services/charger/fetchSessionService\";\nvar URL = \"http://\".concat(ip, \":\").concat(tomcatPort, \"/api/charger/\");\nexport var ACTION_TYPES = {\n  FETCH_SESSION_PENDING: 'FETCH_SESSION_PENDING',\n  FETCH_SESSION_SUCCESS: 'FETCH_SESSION:SUCCESS',\n  FETCH_SESSION_FAILURE: 'FETCH_SESSION_FAILURE'\n};\nexport var getSession = function getSession() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: ACTION_TYPES.FETCH_SESSION_PENDING,\n                payload: null\n              });\n              fetchSession().then(function (response) {\n                dispatch({\n                  type: ACTION_TYPES.FETCH_SESSION_SUCCESS,\n                  payload: response\n                });\n              }).catch(function (error) {\n                dispatch({\n                  type: ACTION_TYPES.FETCH_SESSION_FAILURE,\n                  payload: error\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/actions/sessionActions.js"],"names":["ip","tomcatPort","fetchSession","URL","ACTION_TYPES","FETCH_SESSION_PENDING","FETCH_SESSION_SUCCESS","FETCH_SESSION_FAILURE","getSession","dispatch","type","payload","then","response","catch","error"],"mappings":";;AAAA,SAAQA,EAAR,EAAYC,UAAZ,QAA6B,mBAA7B;AACA,SAAQC,YAAR,QAA2B,yCAA3B;AAEA,IAAMC,GAAG,oBAAaH,EAAb,cAAmBC,UAAnB,kBAAT;AAEA,OAAO,IAAMG,YAAY,GAAG;AACxBC,EAAAA,qBAAqB,EAAE,uBADC;AAExBC,EAAAA,qBAAqB,EAAE,uBAFC;AAGxBC,EAAAA,qBAAqB,EAAE;AAHC,CAArB;AAMP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AACHA,cAAAA,QAAQ,CAAC;AAACC,gBAAAA,IAAI,EAAEN,YAAY,CAACC,qBAApB;AAA2CM,gBAAAA,OAAO,EAAE;AAApD,eAAD,CAAR;AACAT,cAAAA,YAAY,GAAGU,IAAf,CAAoB,UAAAC,QAAQ,EAAI;AAC5BJ,gBAAAA,QAAQ,CAAC;AAACC,kBAAAA,IAAI,EAAEN,YAAY,CAACE,qBAApB;AAA2CK,kBAAAA,OAAO,EAAEE;AAApD,iBAAD,CAAR;AACH,eAFD,EAEGC,KAFH,CAES,UAAAC,KAAK,EAAI;AACdN,gBAAAA,QAAQ,CAAC;AAACC,kBAAAA,IAAI,EAAEN,YAAY,CAACG,qBAApB;AAA2CI,kBAAAA,OAAO,EAAEI;AAApD,iBAAD,CAAR;AACH,eAJD;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAQH,CATM","sourcesContent":["import {ip, tomcatPort} from \"../misc/constants\";\r\nimport {fetchSession} from \"../services/charger/fetchSessionService\";\r\n\r\nconst URL = `http://${ip}:${tomcatPort}/api/charger/`;\r\n\r\nexport const ACTION_TYPES = {\r\n    FETCH_SESSION_PENDING: 'FETCH_SESSION_PENDING',\r\n    FETCH_SESSION_SUCCESS: 'FETCH_SESSION:SUCCESS',\r\n    FETCH_SESSION_FAILURE: 'FETCH_SESSION_FAILURE'\r\n}\r\n\r\nexport const getSession = () => {\r\n    return async (dispatch) => {\r\n        dispatch({type: ACTION_TYPES.FETCH_SESSION_PENDING, payload: null});\r\n        fetchSession().then(response => {\r\n            dispatch({type: ACTION_TYPES.FETCH_SESSION_SUCCESS, payload: response});\r\n        }).catch(error => {\r\n            dispatch({type: ACTION_TYPES.FETCH_SESSION_FAILURE, payload: error});\r\n        });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}
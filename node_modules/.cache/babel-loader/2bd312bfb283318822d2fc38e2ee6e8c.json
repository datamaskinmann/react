{"ast":null,"code":"var ip = \"localhost\";\nvar tomcatPort = \"8080\";\nvar reactPort = \"3000\";\n/**\r\n * OperatingModes\r\n * @type {{CARCONNECTED: number, WAITING: number, ERROR: number, NOCARCONNECTED: number, FINISHED: number, CHARGING: number}}\r\n */\n\nvar STATES = {\n  ERROR: -1,\n  WAITING: 0,\n  NOCARCONNECTED: 1,\n  CARCONNECTED: 2,\n  CHARGING: 3,\n  FINISHED: 4\n};\nvar animStates = {\n  NEUTRAL: \"neutralAnim\",\n  WAITING: \"waitingAnim\",\n  READY: \"readyAnim\",\n  CHARGING: \"chargingAnim\",\n  ERROR: \"errorAnim\"\n};\n\nvar getAnimState = function getAnimState(stateId) {\n  switch (stateId) {\n    case -1:\n      return animStates.ERROR;\n\n    case 0:\n      return animStates.WAITING;\n\n    case 1:\n      return animStates.NEUTRAL;\n\n    case 2:\n      return animStates.READY;\n\n    case 3:\n      return animStates.CHARGING;\n\n    case 4:\n      return animStates.CHARGING;\n\n    default:\n      throw new Error(stateId + \" is not a valid stateId\");\n  }\n};\n\nexport { ip, tomcatPort, reactPort, getAnimState, STATES };","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/misc/constants.js"],"names":["ip","tomcatPort","reactPort","STATES","ERROR","WAITING","NOCARCONNECTED","CARCONNECTED","CHARGING","FINISHED","animStates","NEUTRAL","READY","getAnimState","stateId","Error"],"mappings":"AAAA,IAAMA,EAAE,GAAG,WAAX;AACA,IAAMC,UAAU,GAAG,MAAnB;AACA,IAAMC,SAAS,GAAG,MAAlB;AAEA;AACA;AACA;AACA;;AACA,IAAMC,MAAM,GAAG;AACXC,EAAAA,KAAK,EAAE,CAAC,CADG;AAEXC,EAAAA,OAAO,EAAE,CAFE;AAGXC,EAAAA,cAAc,EAAE,CAHL;AAIXC,EAAAA,YAAY,EAAE,CAJH;AAKXC,EAAAA,QAAQ,EAAE,CALC;AAMXC,EAAAA,QAAQ,EAAE;AANC,CAAf;AASA,IAAMC,UAAU,GAAG;AACfC,EAAAA,OAAO,EAAE,aADM;AAEfN,EAAAA,OAAO,EAAE,aAFM;AAGfO,EAAAA,KAAK,EAAE,WAHQ;AAIfJ,EAAAA,QAAQ,EAAE,cAJK;AAKfJ,EAAAA,KAAK,EAAE;AALQ,CAAnB;;AAQA,IAAMS,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAa;AAC9B,UAAQA,OAAR;AACI,SAAK,CAAC,CAAN;AACI,aAAOJ,UAAU,CAACN,KAAlB;;AACJ,SAAK,CAAL;AACI,aAAOM,UAAU,CAACL,OAAlB;;AACJ,SAAK,CAAL;AACI,aAAOK,UAAU,CAACC,OAAlB;;AACJ,SAAK,CAAL;AACI,aAAOD,UAAU,CAACE,KAAlB;;AACJ,SAAK,CAAL;AACI,aAAOF,UAAU,CAACF,QAAlB;;AACJ,SAAK,CAAL;AACI,aAAOE,UAAU,CAACF,QAAlB;;AACJ;AACI,YAAM,IAAIO,KAAJ,CAAUD,OAAO,GAAG,yBAApB,CAAN;AAdR;AAgBH,CAjBD;;AAmBA,SAAQd,EAAR,EAAYC,UAAZ,EAAwBC,SAAxB,EAAmCW,YAAnC,EAAiDV,MAAjD","sourcesContent":["const ip = \"localhost\";\r\nconst tomcatPort = \"8080\";\r\nconst reactPort = \"3000\";\r\n\r\n/**\r\n * OperatingModes\r\n * @type {{CARCONNECTED: number, WAITING: number, ERROR: number, NOCARCONNECTED: number, FINISHED: number, CHARGING: number}}\r\n */\r\nconst STATES = {\r\n    ERROR: -1,\r\n    WAITING: 0,\r\n    NOCARCONNECTED: 1,\r\n    CARCONNECTED: 2,\r\n    CHARGING: 3,\r\n    FINISHED: 4\r\n}\r\n\r\nconst animStates = {\r\n    NEUTRAL: \"neutralAnim\",\r\n    WAITING: \"waitingAnim\",\r\n    READY: \"readyAnim\",\r\n    CHARGING: \"chargingAnim\",\r\n    ERROR: \"errorAnim\",\r\n}\r\n\r\nconst getAnimState = (stateId) => {\r\n    switch (stateId) {\r\n        case -1:\r\n            return animStates.ERROR;\r\n        case 0:\r\n            return animStates.WAITING;\r\n        case 1:\r\n            return animStates.NEUTRAL;\r\n        case 2:\r\n            return animStates.READY;\r\n        case 3:\r\n            return animStates.CHARGING;\r\n        case 4:\r\n            return animStates.CHARGING;\r\n        default:\r\n            throw new Error(stateId + \" is not a valid stateId\");\r\n    }\r\n}\r\n\r\nexport {ip, tomcatPort, reactPort, getAnimState, STATES }"]},"metadata":{},"sourceType":"module"}
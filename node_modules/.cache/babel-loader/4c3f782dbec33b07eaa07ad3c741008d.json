{"ast":null,"code":"import _defineProperty from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Svenn\\xE6rn\\\\Desktop\\\\laddel-mvp\\\\frontend\\\\src\\\\components\\\\Map.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { MapConsumer, MapContainer, TileLayer } from 'react-leaflet';\nimport { Geolocation } from \"../services/geo/geoService\";\nimport ChargerMarker from \"./ChargerMarker\";\nimport 'leaflet/dist/leaflet.css';\nimport '../stylesheets/Map.css';\nimport '../stylesheets/Center.css';\nimport Overlay from \"./Overlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nDate.prototype.addHours = function (h) {\n  this.setTime(this.getTime() + h * 60 * 60 * 1000);\n  return this;\n};\n\nDate.prototype.addMinutes = function (h) {\n  this.setTime(this.getTime() + h * 60 * 1000);\n  return this;\n};\n/**\r\n * @author Magnus & Sven\r\n * @version 06/08/2021\r\n * Map for display and selection of chargers.\r\n * @param props\r\n * @component\r\n */\n\n\nvar Map = function Map(props) {\n  _s();\n\n  var _useState = useState([61.77735134683034, 9.350803488192016]),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      overlay = _useState4[0],\n      setOverlay = _useState4[1];\n  /**\r\n   * Retrieves position of device on render.\r\n   * @returns function\r\n   * @memberOf Map\r\n   */\n\n\n  useEffect(function () {\n    var isMounted = true;\n    Geolocation().then(function (loc) {\n      if (isMounted) setLocation([loc.coords.latitude, loc.coords.longitude]);\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n\n  var _onClickReserve = function onClickReserve() {\n    setOverlay( /*#__PURE__*/_jsxDEV(Overlay, {\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        style: {\n          backgroundColor: \"white\",\n          width: \"75%\",\n          height: \"50%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"closeOverlay\",\n          onClick: function onClick() {\n            return setOverlay(null);\n          },\n          style: {\n            float: \"right\",\n            marginRight: \"1ch\"\n          },\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }, _this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map\",\n    children: [overlay, /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: location,\n      zoom: 7,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(MapConsumer, {\n        children: function children(map) {\n          map.setView(location, map.getZoom());\n          return null;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, _this), props.chargers.map(function (charger) {\n        var _jsxDEV2;\n\n        return /*#__PURE__*/_jsxDEV(ChargerMarker, (_jsxDEV2 = {\n          id: charger.chargerId // The date from the database is in UTC format, convert to the user's timezone\n          ,\n          scheduledEnd: charger.scheduledEnd != null ? new Date(charger.scheduledEnd).addMinutes(new Date().getTimezoneOffset()) : null,\n          chargerName: charger.chargerName\n        }, _defineProperty(_jsxDEV2, \"id\", charger.chargerId), _defineProperty(_jsxDEV2, \"active\", charger.active), _defineProperty(_jsxDEV2, \"latitude\", charger.latitude), _defineProperty(_jsxDEV2, \"longitude\", charger.longitude), _defineProperty(_jsxDEV2, \"ownerUname\", charger.ownerUname), _defineProperty(_jsxDEV2, \"address\", charger.address), _defineProperty(_jsxDEV2, \"postalCode\", charger.postalCode), _defineProperty(_jsxDEV2, \"city\", charger.city), _defineProperty(_jsxDEV2, \"onClickReserve\", function onClickReserve() {\n          return _onClickReserve();\n        }), _jsxDEV2), charger.chargerId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Map, \"e6iI7NfSHhZWAkBlfMNxOxa/mRU=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["C:/Users/Svenn√¶rn/Desktop/laddel-mvp/frontend/src/components/Map.js"],"names":["React","useEffect","useState","MapConsumer","MapContainer","TileLayer","Geolocation","ChargerMarker","Overlay","Date","prototype","addHours","h","setTime","getTime","addMinutes","Map","props","location","setLocation","overlay","setOverlay","isMounted","then","loc","coords","latitude","longitude","catch","error","console","log","message","onClickReserve","backgroundColor","width","height","float","marginRight","map","setView","getZoom","chargers","charger","chargerId","scheduledEnd","getTimezoneOffset","chargerName","active","ownerUname","address","postalCode","city"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {MapConsumer, MapContainer, TileLayer} from 'react-leaflet';\r\n\r\nimport { Geolocation } from \"../services/geo/geoService\";\r\n\r\nimport ChargerMarker from \"./ChargerMarker\";\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\nimport '../stylesheets/Map.css';\r\nimport '../stylesheets/Center.css';\r\n\r\nimport Overlay from \"./Overlay\";\r\n\r\nDate.prototype.addHours = function (h) {\r\n    this.setTime(this.getTime() + (h*60*60*1000));\r\n    return this;\r\n}\r\n\r\nDate.prototype.addMinutes = function (h) {\r\n    this.setTime(this.getTime() + (h*60*1000));\r\n    return this;\r\n}\r\n\r\n/**\r\n * @author Magnus & Sven\r\n * @version 06/08/2021\r\n * Map for display and selection of chargers.\r\n * @param props\r\n * @component\r\n */\r\n\r\nconst Map = (props) => {\r\n\r\n    const [location, setLocation] = useState([61.77735134683034, 9.350803488192016]);\r\n    const [overlay, setOverlay] = useState(null);\r\n\r\n    /**\r\n     * Retrieves position of device on render.\r\n     * @returns function\r\n     * @memberOf Map\r\n     */\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        Geolocation\r\n        ().then((loc) => {\r\n            if(isMounted) setLocation([loc.coords.latitude, loc.coords.longitude]);\r\n        }).catch((error) => {\r\n            console.log(error.message);\r\n        });\r\n        return () => {isMounted = false};\r\n    }, []);\r\n\r\n    const onClickReserve = () => {\r\n        setOverlay(<Overlay content={\r\n            <div className=\"center\" style={{backgroundColor: \"white\", width: \"75%\", height: \"50%\"}}>\r\n                <h3 className=\"closeOverlay\" onClick={() => setOverlay(null)} style={{float: \"right\", marginRight: \"1ch\"}}>X</h3>\r\n            </div>\r\n        }/>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            {overlay}\r\n            <MapContainer center={location} zoom={7} scrollWheelZoom={true}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n                />\r\n                <MapConsumer>\r\n                    {(map) => {\r\n                        map.setView(location, map.getZoom());\r\n                        return null;\r\n                    }}\r\n                </MapConsumer>\r\n                {props.chargers.map((charger) =>\r\n                    <ChargerMarker key={charger.chargerId}\r\n                       id={charger.chargerId}\r\n                       // The date from the database is in UTC format, convert to the user's timezone\r\n                       scheduledEnd={charger.scheduledEnd != null ? new Date(charger.scheduledEnd).\r\n                       addMinutes(new Date().getTimezoneOffset()) : null}\r\n                       chargerName={charger.chargerName}\r\n                       id={charger.chargerId}\r\n                       active={charger.active}\r\n                       latitude={charger.latitude}\r\n                       longitude={charger.longitude}\r\n                       ownerUname={charger.ownerUname}\r\n                       address={charger.address}\r\n                       postalCode={charger.postalCode}\r\n                       city={charger.city}\r\n                                   onClickReserve={() => onClickReserve()}\r\n\r\n                   />\r\n                )}\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}
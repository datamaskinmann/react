{"ast":null,"code":"import axios from 'axios';\nimport { ip, tomcatPort } from \"../../misc/constants\";\nimport authHeader from \"./auth-header\";\n/**\r\n * Service for håndtering av ulike tjenester tilknyttet bruker\r\n * @author Magnus & Håkon\r\n */\n\nvar URL = \"http://\".concat(ip, \":\").concat(tomcatPort, \"/api/user/\");\nvar dataAPI = axios.create();\n/**\r\n * Metode som forsøker registrering av brukerdata i backend.\r\n * Gjør post til 'URL/register'.\r\n * Dersom responsen er 2XX returneres den.\r\n * Catcher feilmeldinger som er Unauthorized, Connection Error\r\n * @param data - brukerdata som skal postes\r\n * @return {Promise<AxiosResponse<any>>}\r\n */\n\nvar register = function register(data) {\n  return dataAPI.post(\"\".concat(URL, \"register\"), data).then(function (response) {\n    return response;\n  }).catch(function (error) {\n    if (error.response) {\n      return error.response;\n    } else if (error.request) {\n      return error.request;\n    } else {\n      return error.message;\n    }\n  });\n};\n/**\r\n * Metode som forsøker login med brukerdata i backend\r\n * Gjør post til 'URL/login'\r\n * Dersom responsen er 2XX leses strengen i responsen\r\n * slik at e-mail og JWT settes i localStorage.\r\n * Catcher feilmelding som er Unauthorized, Connection Error\r\n * @param data - brukerdata som skal postes\r\n * @return {Promise<AxiosResponse<any>>}\r\n */\n\n\nvar login = function login(data) {\n  return dataAPI.post(\"\".concat(URL, \"login\"), data).then(function (response) {\n    if (response.data) {\n      var string = JSON.stringify(response.data);\n      var arr = string.split(\" \");\n      var username = arr[0].replace('\"', '');\n      var token = arr[1].replace('\"', '');\n      var user = {\n        username: username,\n        JWT: token\n      };\n      localStorage.setItem(\"user\", JSON.stringify(user)); //konfigurere server til å returnere ønsket data\n    }\n\n    return response;\n  }).catch(function (error) {\n    if (error.response) {\n      return error.response;\n    } else if (error.request) {\n      return error.request;\n    } else {\n      return error.message;\n    }\n  });\n};\n/**\r\n * Metode for utlogging. Fjerner user fra localStorage\r\n * @return void\r\n */\n\n\nvar logout = function logout() {\n  localStorage.removeItem(\"user\");\n};\n/**\r\n * Metode som sjekker om JWT i localStorage\r\n * er gyldig i backend. Gjør request med JWT i header.\r\n * Brukes for å gi tilgang på PrivateRoutes\r\n * @return {Promise<AxiosResponse<any> | boolean>}\r\n */\n\n\nvar authenticate = function authenticate() {\n  var config = {\n    headers: authHeader()\n  };\n  return dataAPI.post(\"\".concat(URL, \"authenticate\"), {}, config).then(function (response) {\n    console.log(response.status);\n\n    if (response.status === 200) {\n      return true;\n    }\n\n    return false;\n  }).catch(function (error) {\n    return false;\n  });\n};\n/**\r\n * Metode som henter user som String fra localStorage\r\n * @return String\r\n */\n\n\nvar getCurrentUser = function getCurrentUser() {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\n\nexport { register, login, logout, getCurrentUser, authenticate };","map":{"version":3,"sources":["C:/Users/Svennærn/Desktop/laddel-mvp/frontend/src/services/user/userService.js"],"names":["axios","ip","tomcatPort","authHeader","URL","dataAPI","create","register","data","post","then","response","catch","error","request","message","login","string","JSON","stringify","arr","split","username","replace","token","user","JWT","localStorage","setItem","logout","removeItem","authenticate","config","headers","console","log","status","getCurrentUser","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,EAAR,EAAYC,UAAZ,QAA6B,sBAA7B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA;AACA;AACA;AACA;;AAEA,IAAMC,GAAG,oBAAaH,EAAb,cAAmBC,UAAnB,eAAT;AAEA,IAAMG,OAAO,GAAGL,KAAK,CAACM,MAAN,EAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAEC,IAAF,EAAY;AAEzB,SAAOH,OAAO,CACTI,IADE,WACML,GADN,eACqBI,IADrB,EAEFE,IAFE,CAEG,UAACC,QAAD,EAAc;AAChB,WAAOA,QAAP;AACH,GAJE,EAKFC,KALE,CAKI,UAACC,KAAD,EAAW;AACd,QAAIA,KAAK,CAACF,QAAV,EAAoB;AAChB,aAAOE,KAAK,CAACF,QAAb;AACH,KAFD,MAEO,IAAIE,KAAK,CAACC,OAAV,EAAmB;AACtB,aAAOD,KAAK,CAACC,OAAb;AACH,KAFM,MAGF;AACD,aAAOD,KAAK,CAACE,OAAb;AACH;AAEJ,GAfE,CAAP;AAgBH,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACR,IAAD,EAAU;AAEpB,SAAOH,OAAO,CACTI,IADE,WACML,GADN,YACkBI,IADlB,EAEFE,IAFE,CAEG,UAACC,QAAD,EAAc;AACpB,QAAIA,QAAQ,CAACH,IAAb,EAAmB;AACf,UAAMS,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeR,QAAQ,CAACH,IAAxB,CAAf;AACA,UAAMY,GAAG,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CAAZ;AACA,UAAMC,QAAQ,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,OAAP,CAAe,GAAf,EAAoB,EAApB,CAAjB;AACA,UAAMC,KAAK,GAAGJ,GAAG,CAAC,CAAD,CAAH,CAAOG,OAAP,CAAe,GAAf,EAAoB,EAApB,CAAd;AACA,UAAME,IAAI,GAAG;AACTH,QAAAA,QAAQ,EAAEA,QADD;AAETI,QAAAA,GAAG,EAAEF;AAFI,OAAb;AAIAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BV,IAAI,CAACC,SAAL,CAAeM,IAAf,CAA7B,EATe,CASqC;AACvD;;AACD,WAAOd,QAAP;AACH,GAfM,EAgBFC,KAhBE,CAgBI,UAACC,KAAD,EAAW;AACd,QAAIA,KAAK,CAACF,QAAV,EAAoB;AAChB,aAAOE,KAAK,CAACF,QAAb;AACH,KAFD,MAEO,IAAIE,KAAK,CAACC,OAAV,EAAmB;AACtB,aAAOD,KAAK,CAACC,OAAb;AACH,KAFM,MAGF;AACD,aAAOD,KAAK,CAACE,OAAb;AACH;AAER,GA1BM,CAAP;AA2BH,CA7BD;AA+BA;AACA;AACA;AACA;;;AAEA,IAAMc,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBF,EAAAA,YAAY,CAACG,UAAb,CAAwB,MAAxB;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAEvB,MAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE9B,UAAU;AADR,GAAf;AAIA,SAAOE,OAAO,CAACI,IAAR,WAAgBL,GAAhB,mBAAmC,EAAnC,EAAuC4B,MAAvC,EAAgDtB,IAAhD,CAAqD,UAACC,QAAD,EAAc;AACtEuB,IAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAQ,CAACyB,MAArB;;AACA,QAAIzB,QAAQ,CAACyB,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GANM,EAMJxB,KANI,CAMG,UAACC,KAAD,EAAW;AACb,WAAO,KAAP;AACH,GARE,CAAP;AAUH,CAhBD;AAkBA;AACA;AACA;AACA;;;AAEA,IAAMwB,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,SAAOnB,IAAI,CAACoB,KAAL,CAAWX,YAAY,CAACY,OAAb,CAAqB,MAArB,CAAX,CAAP;AACH,CAFD;;AAIA,SAAShC,QAAT,EAAmBS,KAAnB,EAA0Ba,MAA1B,EAAkCQ,cAAlC,EAAkDN,YAAlD","sourcesContent":["import axios from 'axios';\r\nimport {ip, tomcatPort} from \"../../misc/constants\";\r\nimport authHeader from \"./auth-header\";\r\n\r\n/**\r\n * Service for håndtering av ulike tjenester tilknyttet bruker\r\n * @author Magnus & Håkon\r\n */\r\n\r\nconst URL = `http://${ip}:${tomcatPort}/api/user/`;\r\n\r\nconst dataAPI = axios.create();\r\n\r\n/**\r\n * Metode som forsøker registrering av brukerdata i backend.\r\n * Gjør post til 'URL/register'.\r\n * Dersom responsen er 2XX returneres den.\r\n * Catcher feilmeldinger som er Unauthorized, Connection Error\r\n * @param data - brukerdata som skal postes\r\n * @return {Promise<AxiosResponse<any>>}\r\n */\r\n\r\nconst register = ( data ) => {\r\n\r\n    return dataAPI\r\n        .post(`${URL}register`, data)\r\n        .then((response) => {\r\n            return response;\r\n        })\r\n        .catch((error) => {\r\n            if (error.response) {\r\n                return error.response;\r\n            } else if (error.request) {\r\n                return error.request\r\n            }\r\n            else {\r\n                return error.message\r\n            }\r\n\r\n        });\r\n};\r\n\r\n/**\r\n * Metode som forsøker login med brukerdata i backend\r\n * Gjør post til 'URL/login'\r\n * Dersom responsen er 2XX leses strengen i responsen\r\n * slik at e-mail og JWT settes i localStorage.\r\n * Catcher feilmelding som er Unauthorized, Connection Error\r\n * @param data - brukerdata som skal postes\r\n * @return {Promise<AxiosResponse<any>>}\r\n */\r\n\r\nconst login = (data) => {\r\n\r\n    return dataAPI\r\n        .post(`${URL}login`, data)\r\n        .then((response) => {\r\n        if (response.data) {\r\n            const string = JSON.stringify(response.data);\r\n            const arr = string.split(\" \");\r\n            const username = arr[0].replace('\"', '');\r\n            const token = arr[1].replace('\"', '');\r\n            const user = {\r\n                username: username,\r\n                JWT: token\r\n            }\r\n            localStorage.setItem(\"user\", JSON.stringify(user)); //konfigurere server til å returnere ønsket data\r\n        }\r\n        return response;\r\n    })\r\n        .catch((error) => {\r\n            if (error.response) {\r\n                return error.response;\r\n            } else if (error.request) {\r\n                return error.request\r\n            }\r\n            else {\r\n                return error.message\r\n            }\r\n\r\n    });\r\n};\r\n\r\n/**\r\n * Metode for utlogging. Fjerner user fra localStorage\r\n * @return void\r\n */\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n};\r\n\r\n/**\r\n * Metode som sjekker om JWT i localStorage\r\n * er gyldig i backend. Gjør request med JWT i header.\r\n * Brukes for å gi tilgang på PrivateRoutes\r\n * @return {Promise<AxiosResponse<any> | boolean>}\r\n */\r\n\r\nconst authenticate = () => {\r\n\r\n    const config = {\r\n        headers: authHeader()\r\n    };\r\n\r\n    return dataAPI.post(`${URL}authenticate`, {}, config ).then((response) => {\r\n        console.log(response.status)\r\n        if (response.status === 200) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }).catch( (error) => {\r\n            return false;\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Metode som henter user som String fra localStorage\r\n * @return String\r\n */\r\n\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nexport { register, login, logout, getCurrentUser, authenticate };"]},"metadata":{},"sourceType":"module"}
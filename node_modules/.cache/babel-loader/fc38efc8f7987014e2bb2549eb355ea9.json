{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { ip, tomcatPort } from \"../misc/constants\";\nimport authHeader from \"../services/user/auth-header\";\nimport history from \"../history\";\nvar URL = \"http://\".concat(ip, \":\").concat(tomcatPort, \"/api/user/\");\n/**\r\n * userActions har dispatch av actions knyttet til bruker\r\n * Login, Logout, Register, Auth\r\n * @author Magnus\r\n */\n\nexport var ACTION_TYPES = {\n  LOGIN_USER: 'LOGIN_USER',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  REGISTER_USER: 'REGISTER_USER',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\n  AUTH_USER: 'AUTH_USER',\n  AUTH_SUCCESS: 'AUTH_SUCCESS',\n  AUTH_FAILURE: 'AUTH_FAILURE',\n  LOGOUT_USER: 'LOGOUT_USER'\n};\n/**\r\n * Metode som dispatcher actions knyttet til innlogging.\r\n * @param user\r\n * @return async function\r\n */\n\nexport var loginUser = function loginUser(user) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: ACTION_TYPES.LOGIN_USER,\n                payload: user\n              });\n              _context.next = 3;\n              return axios.post(\"\".concat(URL, \"login\"), user).then(function (response) {\n                var string = JSON.stringify(response.data);\n                var arr = string.split(\" \");\n                var username = arr[0].replace('\"', '');\n                var token = arr[1].replace('\"', '');\n                var user = {\n                  username: username,\n                  JWT: token\n                };\n                localStorage.setItem(\"token\", JSON.stringify(user.JWT));\n                dispatch({\n                  type: ACTION_TYPES.LOGIN_SUCCESS,\n                  payload: user\n                });\n                history.push(\"/\");\n              }).catch(function (error) {\n                dispatch({\n                  type: ACTION_TYPES.LOGIN_FAILURE,\n                  payload: error\n                });\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n/**\r\n * Metode som dispatcher actions knyttet til registrering\r\n * @param user\r\n * @return async function\r\n */\n\nexport var registerUser = function registerUser(user) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: ACTION_TYPES.REGISTER_USER,\n                payload: user\n              });\n              axios.post(\"\".concat(URL, \"register\"), user).then(function (response) {\n                dispatch({\n                  type: ACTION_TYPES.REGISTER_SUCCESS,\n                  payload: user\n                });\n                history.push(\"/login\");\n              }).catch(function (error) {\n                dispatch({\n                  type: ACTION_TYPES.REGISTER_FAILURE,\n                  payload: error\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n/**\r\n * Metode som dispatcher actions knyttet til utlogging\r\n * @return function\r\n */\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    localStorage.removeItem(\"token\");\n    dispatch({\n      type: ACTION_TYPES.LOGOUT_USER\n    });\n    history.push(\"/login\");\n  };\n};\n/**\r\n * Metode som dispatcher actions knyttet til autorisering\r\n * @return async function\r\n */\n\nexport var authUser = function authUser() {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var config;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: ACTION_TYPES.AUTH_USER\n              });\n              config = {\n                headers: authHeader()\n              };\n              _context3.next = 4;\n              return axios.post(\"\".concat(URL, \"authenticate\"), {}, config).then(function (response) {\n                dispatch({\n                  type: ACTION_TYPES.AUTH_SUCCESS,\n                  payload: response\n                });\n              }).catch(function (error) {\n                dispatch({\n                  type: ACTION_TYPES.AUTH_FAILURE,\n                  payload: error\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/Svenn√¶rn/Desktop/laddel-mvp/frontend/src/actions/userActions.js"],"names":["axios","ip","tomcatPort","authHeader","history","URL","ACTION_TYPES","LOGIN_USER","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_USER","REGISTER_SUCCESS","REGISTER_FAILURE","AUTH_USER","AUTH_SUCCESS","AUTH_FAILURE","LOGOUT_USER","loginUser","user","dispatch","type","payload","post","then","response","string","JSON","stringify","data","arr","split","username","replace","token","JWT","localStorage","setItem","push","catch","error","registerUser","logoutUser","removeItem","authUser","config","headers"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {ip, tomcatPort} from \"../misc/constants\";\r\nimport authHeader from \"../services/user/auth-header\";\r\n\r\nimport history from \"../history\";\r\n\r\nconst URL = `http://${ip}:${tomcatPort}/api/user/`;\r\n\r\n/**\r\n * userActions har dispatch av actions knyttet til bruker\r\n * Login, Logout, Register, Auth\r\n * @author Magnus\r\n */\r\n\r\nexport const ACTION_TYPES = {\r\n    LOGIN_USER: 'LOGIN_USER',\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n    REGISTER_USER: 'REGISTER_USER',\r\n    REGISTER_SUCCESS: 'REGISTER_SUCCESS',\r\n    REGISTER_FAILURE: 'REGISTER_FAILURE',\r\n    AUTH_USER: 'AUTH_USER',\r\n    AUTH_SUCCESS: 'AUTH_SUCCESS',\r\n    AUTH_FAILURE: 'AUTH_FAILURE',\r\n    LOGOUT_USER: 'LOGOUT_USER'\r\n};\r\n\r\n/**\r\n * Metode som dispatcher actions knyttet til innlogging.\r\n * @param user\r\n * @return async function\r\n */\r\n\r\nexport const loginUser = (user) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: ACTION_TYPES.LOGIN_USER, payload: user});\r\n        await axios\r\n        .post(`${URL}login`, user)\r\n        .then((response) => {\r\n            const string = JSON.stringify(response.data);\r\n            const arr = string.split(\" \");\r\n            const username = arr[0].replace('\"', '');\r\n            const token = arr[1].replace('\"', '');\r\n            const user = {\r\n                username: username,\r\n                JWT: token\r\n            }\r\n            localStorage.setItem(\"token\", JSON.stringify(user.JWT));\r\n            dispatch({ type: ACTION_TYPES.LOGIN_SUCCESS, payload: user});\r\n            history.push(\"/\");\r\n        })\r\n        .catch((error) => {\r\n            dispatch({ type: ACTION_TYPES.LOGIN_FAILURE, payload: error});\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Metode som dispatcher actions knyttet til registrering\r\n * @param user\r\n * @return async function\r\n */\r\n\r\nexport const registerUser = (user) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: ACTION_TYPES.REGISTER_USER, payload: user});\r\n        axios.post(`${URL}register`, user)\r\n            .then((response) => {\r\n                dispatch({ type: ACTION_TYPES.REGISTER_SUCCESS, payload: user});\r\n                history.push(\"/login\");\r\n            }).catch((error) => {\r\n                dispatch({ type: ACTION_TYPES.REGISTER_FAILURE, payload: error});\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Metode som dispatcher actions knyttet til utlogging\r\n * @return function\r\n */\r\n\r\nexport const logoutUser = () => {\r\n    return (dispatch) => {\r\n        localStorage.removeItem(\"token\");\r\n        dispatch({ type: ACTION_TYPES.LOGOUT_USER });\r\n        history.push(\"/login\");\r\n    }\r\n}\r\n\r\n/**\r\n * Metode som dispatcher actions knyttet til autorisering\r\n * @return async function\r\n */\r\n\r\nexport const authUser = () => {\r\n    return async (dispatch) => {\r\n        dispatch( { type: ACTION_TYPES.AUTH_USER });\r\n        const config = {\r\n            headers: authHeader()\r\n        };\r\n        await axios.post(`${URL}authenticate`, {}, config)\r\n            .then((response) => {\r\n                dispatch({ type: ACTION_TYPES.AUTH_SUCCESS, payload: response});\r\n            }).catch((error) => {\r\n                dispatch({ type: ACTION_TYPES.AUTH_FAILURE, payload: error});\r\n        });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport userReducer from \"./userReducer\";\nimport sessionReducer from \"./sessionReducer\";\nimport mapReducer from \"./mapReducer\";\n/**\r\n * @author Magnus\r\n * @version 06/08/2021\r\n * Reducer passed to store.\r\n * Contains states to be stored in state.\r\n */\n\n/**\r\n * Configurates persistance for store,\r\n * such that whitelisted states will be saved in localstorage\r\n * @type Object\r\n */\n\nvar persistConfig = {\n  key: 'root',\n  storage: storage,\n  whitelist: ['auth', 'session', 'map']\n};\n/**\r\n * Composed reducer.\r\n * @type {Reducer<CombinedState>}\r\n */\n\nvar rootReducer = combineReducers({\n  auth: userReducer,\n  session: sessionReducer,\n  map: mapReducer\n});\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["C:/Users/Svenn√¶rn/Desktop/laddel-mvp/frontend/src/reducers/rootReducer.js"],"names":["combineReducers","persistReducer","storage","userReducer","sessionReducer","mapReducer","persistConfig","key","whitelist","rootReducer","auth","session","map"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBL,EAAAA,OAAO,EAAPA,OAFkB;AAGlBM,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,KAApB;AAHO,CAAtB;AAMA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAGT,eAAe,CAAC;AAChCU,EAAAA,IAAI,EAAEP,WAD0B;AAEhCQ,EAAAA,OAAO,EAAEP,cAFuB;AAGhCQ,EAAAA,GAAG,EAAEP;AAH2B,CAAD,CAAnC;AAMA,eAAeJ,cAAc,CAACK,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"\r\n\r\nimport userReducer from \"./userReducer\";\r\nimport sessionReducer from \"./sessionReducer\";\r\nimport mapReducer from \"./mapReducer\";\r\n\r\n/**\r\n * @author Magnus\r\n * @version 06/08/2021\r\n * Reducer passed to store.\r\n * Contains states to be stored in state.\r\n */\r\n\r\n/**\r\n * Configurates persistance for store,\r\n * such that whitelisted states will be saved in localstorage\r\n * @type Object\r\n */\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['auth', 'session', 'map']\r\n}\r\n\r\n/**\r\n * Composed reducer.\r\n * @type {Reducer<CombinedState>}\r\n */\r\nconst rootReducer = combineReducers({\r\n    auth: userReducer,\r\n    session: sessionReducer,\r\n    map: mapReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);"]},"metadata":{},"sourceType":"module"}
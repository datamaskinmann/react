{"ast":null,"code":"import { doPostAsync } from \"../api\";\nimport authHeader from \"../user/auth-header\";\nimport { ip, tomcatPort } from \"../../misc/constants\";\nvar URL = \"http://\".concat(ip, \":\").concat(tomcatPort, \"/api/charger\");\n/**\r\n * This service gets all the chargers as well as their state from the backend\r\n * @author Sven\r\n * @version 06/08/2021\r\n */\n\nvar fetchChargers = function fetchChargers() {\n  return new Promise(function (resolve, reject) {\n    return doPostAsync(\"\".concat(URL, \"/getAllChargers\"), null, authHeader()).then(function (x) {\n      resolve(x.data);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n};\n\nexport { fetchChargers };","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/services/charger/fetchChargersService.js"],"names":["doPostAsync","authHeader","ip","tomcatPort","URL","fetchChargers","Promise","resolve","reject","then","x","data","catch","error"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,QAA1B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,SAASC,EAAT,EAAaC,UAAb,QAA+B,sBAA/B;AAEA,IAAMC,GAAG,oBAAaF,EAAb,cAAmBC,UAAnB,iBAAT;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,WACfR,WAAW,WAAII,GAAJ,sBAA0B,IAA1B,EAAgCH,UAAU,EAA1C,CAAX,CAAyDQ,IAAzD,CAA8D,UAAAC,CAAC,EAAI;AAC/DH,MAAAA,OAAO,CAACG,CAAC,CAACC,IAAH,CAAP;AACH,KAFD,EAEGC,KAFH,CAES,UAACC,KAAD,EAAW;AAChBL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACH,KAJD,CADe;AAAA,GAAZ,CAAP;AAMH,CAPD;;AASA,SAASR,aAAT","sourcesContent":["import {doPostAsync} from \"../api\";\r\nimport authHeader from \"../user/auth-header\";\r\n\r\nimport { ip, tomcatPort } from \"../../misc/constants\";\r\n\r\nconst URL = `http://${ip}:${tomcatPort}/api/charger`\r\n\r\n/**\r\n * This service gets all the chargers as well as their state from the backend\r\n * @author Sven\r\n * @version 06/08/2021\r\n */\r\nconst fetchChargers = () => {\r\n    return new Promise((resolve, reject) =>\r\n        doPostAsync(`${URL}/getAllChargers`, null, authHeader()).then(x => {\r\n            resolve(x.data);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        }));\r\n};\r\n\r\nexport { fetchChargers }\r\n"]},"metadata":{},"sourceType":"module"}
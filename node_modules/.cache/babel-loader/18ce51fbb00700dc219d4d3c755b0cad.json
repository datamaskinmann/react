{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport doRequest from \"../http/http\";\nimport { doGet } from \"../api\";\n/**\r\n * @author Sven\r\n */\n\n/**\r\n * Attempts to find the latitude/longitude combination of an address\r\n * @param address the address\r\n * @return {Promise<any>}\r\n */\n\nvar Geocode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", doGet(\"http://open.mapquestapi.com/geocoding/v1/address?key=cPAuQRJNFCf5WEbYyaFMTBu1RNVg0Lw5&location=\" + encodeURI(address)));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function Geocode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\r\n * Attemps to find the address of a latitude/longitude combination\r\n * @param lat latitude\r\n * @param lng longitude\r\n * @returns {Promise<any>}\r\n */\n\n\n_c = Geocode;\n\nvar ReverseGeocode = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(lat, lng) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", doGet(\"http://open.mapquestapi.com/geocoding/v1/reverse?key=cPAuQRJNFCf5WEbYyaFMTBu1RNVg0Lw5&location=\".concat(lat, \",\").concat(lng)));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function ReverseGeocode(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\r\n * Attempts to get the user's geolocation\r\n * @returns {Promise<unknown>}\r\n */\n\n\n_c2 = ReverseGeocode;\n\nvar Geolocation = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return new Promise(function (resolve, reject) {\n              navigator.geolocation.getCurrentPosition(resolve, reject);\n            });\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function Geolocation() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n_c3 = Geolocation;\nexport { Geolocation, Geocode, ReverseGeocode };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Geocode\");\n$RefreshReg$(_c2, \"ReverseGeocode\");\n$RefreshReg$(_c3, \"Geolocation\");","map":{"version":3,"sources":["C:/Users/Svenn√¶rn/Desktop/laddel-mvp/frontend/src/services/geo/geoService.js"],"names":["doRequest","doGet","Geocode","address","encodeURI","ReverseGeocode","lat","lng","Geolocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAAQC,KAAR,QAAoB,QAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,OAAO;AAAA,sEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,6CACLF,KAAK,CAAC,oGACPG,SAAS,CAACD,OAAD,CADH,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPD,OAAO;AAAA;AAAA;AAAA,GAAb;AAKA;AACA;AACA;AACA;AACA;AACA;;;KAVMA,O;;AAWN,IAAMG,cAAc;AAAA,uEAAG,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,8CACZN,KAAK,0GAAmGK,GAAnG,cAA0GC,GAA1G,EADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdF,cAAc;AAAA;AAAA;AAAA,GAApB;AAIA;AACA;AACA;AACA;;;MAPMA,c;;AAQN,IAAMG,WAAW;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACH,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1CC,cAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCJ,OAAzC,EAAkDC,MAAlD;AACH,aAFY,CADG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXH,WAAW;AAAA;AAAA;AAAA,GAAjB;;MAAMA,W;AAMN,SAAQA,WAAR,EAAqBN,OAArB,EAA8BG,cAA9B","sourcesContent":["import doRequest from \"../http/http\";\r\nimport {doGet} from \"../api\";\r\n\r\n/**\r\n * @author Sven\r\n */\r\n\r\n/**\r\n * Attempts to find the latitude/longitude combination of an address\r\n * @param address the address\r\n * @return {Promise<any>}\r\n */\r\nconst Geocode = async (address) => {\r\n    return doGet(\"http://open.mapquestapi.com/geocoding/v1/address?key=cPAuQRJNFCf5WEbYyaFMTBu1RNVg0Lw5&location=\"\r\n        + encodeURI(address));\r\n}\r\n\r\n/**\r\n * Attemps to find the address of a latitude/longitude combination\r\n * @param lat latitude\r\n * @param lng longitude\r\n * @returns {Promise<any>}\r\n */\r\nconst ReverseGeocode = async (lat, lng) => {\r\n    return doGet(`http://open.mapquestapi.com/geocoding/v1/reverse?key=cPAuQRJNFCf5WEbYyaFMTBu1RNVg0Lw5&location=${lat},${lng}`)\r\n}\r\n\r\n/**\r\n * Attempts to get the user's geolocation\r\n * @returns {Promise<unknown>}\r\n */\r\nconst Geolocation = async () => {\r\n    return await new Promise((resolve, reject) => {\r\n        navigator.geolocation.getCurrentPosition(resolve, reject);\r\n    });\r\n}\r\n\r\nexport {Geolocation, Geocode, ReverseGeocode}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useEffect, useRef, useState } from \"react\";\nimport roundToNearest5 from \"../services/math/roundToNearest5\";\nimport { addHours, nToNN } from \"../services/time/timeService\";\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n/*\r\nconst TimeSelector = ({onChangeHour, onChangeMinute}) => {\r\n\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    onChangeHour(date.getHours());\r\n    onChangeMinute(date.getMinutes());\r\n\r\n    const [availableMinutes, setAvailableMinutes] = useState(null);\r\n\r\n    const [selectedHour, setSelectedHour] = useState(date.getHours());\r\n    const [selectedMinute, setSelectedMinute] = useState(roundToNearest5(date.getMinutes() + 5));\r\n\r\n    console.log(selectedDate);\r\n\r\n    const pollTime = setInterval(() => {\r\n        const curDate = new Date();\r\n        if (curDate.getMinutes() !== date.getMinutes()) {\r\n            clearInterval(pollTime);\r\n            setDate(new Date());\r\n        }\r\n    }, 1000);\r\n\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n\r\n        if(isMounted) {\r\n            // To ensure that if the clock is for example 19:55, you can only start selecting from 20:00 and up\r\n            updateAvailableMinutes();\r\n        }\r\n\r\n        return (() => {\r\n            clearInterval(pollTime);\r\n            isMounted = false;\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n        if(isMounted) {\r\n            updateAvailableMinutes();\r\n        }\r\n\r\n        return (() => {\r\n            isMounted = false;\r\n        })\r\n\r\n    }, [selectedDate.current.getHours()]);\r\n\r\n    const updateAvailableMinutes = () => {\r\n        let avail = [];\r\n        // DO NOT CHANGE TO ==\r\n        switch(date.getHours() == selectedDate.current.getHours()) {\r\n            case true:\r\n                for(let i = roundToNearest5(date.getMinutes()) + 5; i < 60; i+=5) {\r\n                    avail.push(i);\r\n                }\r\n                setAvailableMinutes(avail);\r\n                break;\r\n            default:\r\n                for(let i = 0; i < 60; i += 5) {\r\n                    avail.push(i);\r\n                }\r\n                setAvailableMinutes(avail);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"timeSelectorContainer\">\r\n            <select onChange={(e) => {\r\n                selectedDate.current = new Date(e.target.value);\r\n                setRerender(!rerender);\r\n            }} style={{width: \"33%\"}} name=\"hour\">\r\n                {date.getMinutes() + 5 >= 55 ?\r\n                    [...Array(9).keys()].map(x => {\r\n                        return (\r\n                            <option value={addHours(date, x + 1).getHours()}>{addHours(date, x + 1).getHours()}</option>\r\n                        )\r\n                    })\r\n                    :\r\n                    [...Array(9).keys()].map(x => {\r\n                        return (\r\n                            <option value={addHours(date, x)}>{addHours(date, x).getHours()}</option>\r\n                        )\r\n                    })\r\n                }\r\n            </select>\r\n            <h3 style={{display: \"inline-block\", marginLeft: \"3%\", marginRight: \"3%\"}}>:</h3>\r\n            <select onChange={(e) => {\r\n                selectedDate.current.setMinutes(parseInt(e.target.value));\r\n                setRerender(!rerender);\r\n            }} style={{width: \"33%\"}} name=\"minute\">\r\n                {availableMinutes !== null ?\r\n                    availableMinutes.map((minute) => {\r\n                        return (\r\n                            <option key={minute} value={minute}>{nToNN(minute)}</option>\r\n                        )\r\n                    })\r\n                    :\r\n                    null\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeSelector;*/","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/components/TimeSelector.js"],"names":["React","useEffect","useRef","useState","roundToNearest5","addHours","nToNN","AdapterDateFns","LocalizationProvider"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,SAAQC,QAAR,EAAkBC,KAAlB,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,oBAAP,MAAiC,uCAAjsourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport roundToNearest5 from \"../services/math/roundToNearest5\";\r\nimport {addHours, nToNN} from \"../services/time/timeService\";\r\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\r\n\r\n/*\r\nconst TimeSelector = ({onChangeHour, onChangeMinute}) => {\r\n\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    onChangeHour(date.getHours());\r\n    onChangeMinute(date.getMinutes());\r\n\r\n    const [availableMinutes, setAvailableMinutes] = useState(null);\r\n\r\n    const [selectedHour, setSelectedHour] = useState(date.getHours());\r\n    const [selectedMinute, setSelectedMinute] = useState(roundToNearest5(date.getMinutes() + 5));\r\n\r\n    console.log(selectedDate);\r\n\r\n    const pollTime = setInterval(() => {\r\n        const curDate = new Date();\r\n        if (curDate.getMinutes() !== date.getMinutes()) {\r\n            clearInterval(pollTime);\r\n            setDate(new Date());\r\n        }\r\n    }, 1000);\r\n\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n\r\n        if(isMounted) {\r\n            // To ensure that if the clock is for example 19:55, you can only start selecting from 20:00 and up\r\n            updateAvailableMinutes();\r\n        }\r\n\r\n        return (() => {\r\n            clearInterval(pollTime);\r\n            isMounted = false;\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n        if(isMounted) {\r\n            updateAvailableMinutes();\r\n        }\r\n\r\n        return (() => {\r\n            isMounted = false;\r\n        })\r\n\r\n    }, [selectedDate.current.getHours()]);\r\n\r\n    const updateAvailableMinutes = () => {\r\n        let avail = [];\r\n        // DO NOT CHANGE TO ==\r\n        switch(date.getHours() == selectedDate.current.getHours()) {\r\n            case true:\r\n                for(let i = roundToNearest5(date.getMinutes()) + 5; i < 60; i+=5) {\r\n                    avail.push(i);\r\n                }\r\n                setAvailableMinutes(avail);\r\n                break;\r\n            default:\r\n                for(let i = 0; i < 60; i += 5) {\r\n                    avail.push(i);\r\n                }\r\n                setAvailableMinutes(avail);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"timeSelectorContainer\">\r\n            <select onChange={(e) => {\r\n                selectedDate.current = new Date(e.target.value);\r\n                setRerender(!rerender);\r\n            }} style={{width: \"33%\"}} name=\"hour\">\r\n                {date.getMinutes() + 5 >= 55 ?\r\n                    [...Array(9).keys()].map(x => {\r\n                        return (\r\n                            <option value={addHours(date, x + 1).getHours()}>{addHours(date, x + 1).getHours()}</option>\r\n                        )\r\n                    })\r\n                    :\r\n                    [...Array(9).keys()].map(x => {\r\n                        return (\r\n                            <option value={addHours(date, x)}>{addHours(date, x).getHours()}</option>\r\n                        )\r\n                    })\r\n                }\r\n            </select>\r\n            <h3 style={{display: \"inline-block\", marginLeft: \"3%\", marginRight: \"3%\"}}>:</h3>\r\n            <select onChange={(e) => {\r\n                selectedDate.current.setMinutes(parseInt(e.target.value));\r\n                setRerender(!rerender);\r\n            }} style={{width: \"33%\"}} name=\"minute\">\r\n                {availableMinutes !== null ?\r\n                    availableMinutes.map((minute) => {\r\n                        return (\r\n                            <option key={minute} value={minute}>{nToNN(minute)}</option>\r\n                        )\r\n                    })\r\n                    :\r\n                    null\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeSelector;*/"]},"metadata":{},"sourceType":"module"}
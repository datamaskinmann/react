{"ast":null,"code":"import _slicedToArray from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Svenn\\xE6rn\\\\Desktop\\\\laddel-mvp\\\\frontend\\\\src\\\\pages\\\\RegisterChargerMapPage.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { MapConsumer, MapContainer, TileLayer } from 'react-leaflet';\nimport vectorDistance from \"../services/math/vectordistance\";\nimport { Geocode, Geolocation, ReverseGeocode } from \"../services/geo/geoService\";\nimport AddressSelectorMarker from \"../components/AddressSelectorMarker\";\nimport AddressSearchBar from \"../components/AddressSearchBar\";\nimport '../stylesheets/RegisterChargerMapPage.css';\nimport history from \"../history\";\n/**\r\n * @author Sven\r\n * @version 06/08/2021\r\n * Page for registering a new charger\r\n * @component\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar RegisterChargerMapPage = function RegisterChargerMapPage() {\n  _s();\n\n  var _useState = useState([58.147582, 7.9971]),\n      _useState2 = _slicedToArray(_useState, 2),\n      position = _useState2[0],\n      setPosition = _useState2[1];\n\n  var _useState3 = useState(\"Henter addresse...\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(11),\n      _useState6 = _slicedToArray(_useState5, 2),\n      zoom = _useState6[0],\n      setZoom = _useState6[1];\n  /**\r\n   * Function that is called when a user submits an address in the address search bar\r\n   * @param e - event\r\n   * @return void\r\n   * @memberOf RegisterChargerMapPage\r\n   */\n\n\n  var submitAddressSearchBar = function submitAddressSearchBar(e) {\n    // Attempt to Geocode address (Convert sdsaddress to latitude and longitude)\n    Geocode(e.address.value).then(function (x) {\n      console.log(x);\n      var locations = JSON.parse(x).results[0].locations; // No address found\n\n      if (locations.length === 0) {\n        alert(\"Fant ikke adressen, vennligst prøv igjen.\");\n        return;\n      } // Only one address found, set the position\n\n\n      if (locations.length === 1) {\n        var selectedPos = locations[0].latLng;\n        setZoom(20);\n        setPosition([selectedPos.lat, selectedPos.lng]);\n        return;\n      } // More than 1 position found\n\n\n      Geolocation().then(function (x) {\n        //Attempt to get the user's geolocation\n        var a = {\n          x: x.coords.latitude,\n          y: x.coords.longitude\n        }; // Find the location closest to where the user currently is\n\n        locations = locations.sort(function (x, z) {\n          // If distance from a to x is less than distance from\n          // a to z, return -1\n          if (vectorDistance(a, {\n            x: x.latLng.lat,\n            y: x.latLng.lng\n          }) < vectorDistance(a, {\n            x: z.latLng.lat,\n            y: z.latLng.lng\n          })) {\n            return -1; // if distance from a to x is greater than distance from\n            // a to z, return 1\n          } else if (vectorDistance(a, {\n            x: x.latLng.lat,\n            y: x.latLng.lng\n          }) > vectorDistance(a, {\n            x: z.latLng.lat,\n            y: z.latLng.lng\n          })) {\n            return 1; // The vectors are equidistant\n          } else {\n            return 0;\n          }\n        });\n        setPosition([locations[0].latLng.lat, locations[0].latLng.lng]);\n        setZoom(20);\n      }).catch(function () {\n        setZoom(20);\n        setPosition([locations[0].latLng.lat, locations[0].latLng.lng]);\n      });\n    });\n  };\n  /**\r\n   * Function that is called when AddressSelectorMarker gets dragged to a new position\r\n   * @param e - event\r\n   * @return void\r\n   * @memberOf RegisterChargerMapPage\r\n   */\n\n\n  var _dragend = function dragend(e) {\n    setPosition([e.lat, e.lng]);\n    setZoom(20);\n    ReverseGeocode(e.lat, e.lng).then(function (x) {\n      try {\n        var data = JSON.parse(x).results[0].locations[0];\n        var _address = data.street; // By default, leaflet puts the address number before the address name\n        // which is incorrect in Norway, so if it contains a number we reorder the\n        // string so that the number comes first\n\n        if (containsNumber(_address)) {\n          _address = _address.split(\" \");\n          var addressStringBuilder = \"\";\n\n          for (var i = 1; i < _address.length; i++) {\n            addressStringBuilder += _address[i] + \" \";\n          }\n\n          addressStringBuilder += _address[0];\n          setAddress(addressStringBuilder);\n        } else {\n          setAddress(_address);\n        }\n      } catch (error) {\n        console.log(error);\n        setAddress(\"Kunne ikke finne addressen...\");\n      }\n    });\n  };\n  /**\r\n   * Sends user to RegisterChargerPage and passes relevant parameters\r\n   * to be parsed from URL.\r\n   * @return void\r\n   * @memberOf RegisterChargerMapPage\r\n   */\n\n\n  var selectAddress = function selectAddress() {\n    history.push(\"/registercharger/\".concat(position[0], \"/\").concat(position[1], \"/\").concat(address));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      className: \"laddelGreen\",\n      children: \"Legg til nytt ladepunkt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(AddressSearchBar, {\n      callback: function callback(e) {\n        return submitAddressSearchBar(e);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map\",\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: position,\n        scrollWheelZoom: true,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(MapConsumer, {\n          children: function children(map) {\n            map.setView(position, zoom);\n            return null;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(AddressSelectorMarker, {\n          position: position,\n          address: address // Reverse GeoCode (Convert latitude and longitutde to address)\n          ,\n          dragend: function dragend(e) {\n            return _dragend(e);\n          },\n          callback: function callback() {\n            return selectAddress();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(RegisterChargerMapPage, \"1D9xHsU38dcmAkNKGypy7hyPzMI=\");\n\n_c = RegisterChargerMapPage;\n\nvar containsNumber = function containsNumber(string) {\n  return /\\d/.test(string);\n};\n\nexport default RegisterChargerMapPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterChargerMapPage\");","map":{"version":3,"sources":["C:/Users/Svennærn/Desktop/laddel-mvp/frontend/src/pages/RegisterChargerMapPage.js"],"names":["React","useState","MapConsumer","MapContainer","TileLayer","vectorDistance","Geocode","Geolocation","ReverseGeocode","AddressSelectorMarker","AddressSearchBar","history","RegisterChargerMapPage","position","setPosition","address","setAddress","zoom","setZoom","submitAddressSearchBar","e","value","then","x","console","log","locations","JSON","parse","results","length","alert","selectedPos","latLng","lat","lng","a","coords","latitude","y","longitude","sort","z","catch","dragend","data","street","containsNumber","split","addressStringBuilder","i","error","selectAddress","push","textAlign","map","setView","string","test"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {MapConsumer, MapContainer, TileLayer} from 'react-leaflet';\r\n\r\nimport vectorDistance from \"../services/math/vectordistance\";\r\nimport {Geocode, Geolocation, ReverseGeocode} from \"../services/geo/geoService\";\r\n\r\nimport AddressSelectorMarker from \"../components/AddressSelectorMarker\";\r\nimport AddressSearchBar from \"../components/AddressSearchBar\";\r\n\r\nimport '../stylesheets/RegisterChargerMapPage.css';\r\nimport history from \"../history\";\r\n\r\n/**\r\n * @author Sven\r\n * @version 06/08/2021\r\n * Page for registering a new charger\r\n * @component\r\n */\r\nconst RegisterChargerMapPage = () => {\r\n\r\n    const [position, setPosition] = useState([58.147582, 7.9971]);\r\n    const [address, setAddress] = useState(\"Henter addresse...\");\r\n    const [zoom, setZoom] = useState(11);\r\n\r\n    /**\r\n     * Function that is called when a user submits an address in the address search bar\r\n     * @param e - event\r\n     * @return void\r\n     * @memberOf RegisterChargerMapPage\r\n     */\r\n    const submitAddressSearchBar = (e) => {\r\n        // Attempt to Geocode address (Convert sdsaddress to latitude and longitude)\r\n        Geocode(e.address.value).then(x => {\r\n            console.log(x)\r\n            let locations = JSON.parse(x).results[0].locations;\r\n\r\n            // No address found\r\n            if (locations.length === 0) {\r\n                alert(\"Fant ikke adressen, vennligst prøv igjen.\");\r\n                return;\r\n            }\r\n\r\n            // Only one address found, set the position\r\n            if (locations.length === 1) {\r\n                let selectedPos = locations[0].latLng;\r\n\r\n                setZoom(20);\r\n                setPosition([selectedPos.lat, selectedPos.lng]);\r\n                return;\r\n            }\r\n\r\n            // More than 1 position found\r\n            Geolocation().then(x => {\r\n                //Attempt to get the user's geolocation\r\n                let a = {x: x.coords.latitude, y: x.coords.longitude};\r\n\r\n                // Find the location closest to where the user currently is\r\n                locations = locations.sort((x, z) => {\r\n                    // If distance from a to x is less than distance from\r\n                    // a to z, return -1\r\n                    if (vectorDistance(a, {x: x.latLng.lat, y: x.latLng.lng}) <\r\n                        vectorDistance(a, {x: z.latLng.lat, y: z.latLng.lng})) {\r\n                        return -1;\r\n                        // if distance from a to x is greater than distance from\r\n                        // a to z, return 1\r\n                    } else if (vectorDistance(a, {x: x.latLng.lat, y: x.latLng.lng}) >\r\n                        vectorDistance(a, {x: z.latLng.lat, y: z.latLng.lng})) {\r\n                        return 1;\r\n                        // The vectors are equidistant\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                });\r\n\r\n                setPosition([locations[0].latLng.lat, locations[0].latLng.lng]);\r\n                setZoom(20);\r\n            }).catch(() => {\r\n                setZoom(20);\r\n                setPosition([locations[0].latLng.lat, locations[0].latLng.lng]);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function that is called when AddressSelectorMarker gets dragged to a new position\r\n     * @param e - event\r\n     * @return void\r\n     * @memberOf RegisterChargerMapPage\r\n     */\r\n\r\n    const dragend = (e) => {\r\n        setPosition([e.lat, e.lng]);\r\n        setZoom(20)\r\n        ReverseGeocode(e.lat, e.lng).then(x => {\r\n            try {\r\n                let data = JSON.parse(x).results[0].locations[0];\r\n                let address = data.street;\r\n\r\n                // By default, leaflet puts the address number before the address name\r\n                // which is incorrect in Norway, so if it contains a number we reorder the\r\n                // string so that the number comes first\r\n                if (containsNumber(address)) {\r\n                    address = address.split(\" \");\r\n                    let addressStringBuilder = \"\";\r\n\r\n                    for (let i = 1; i < address.length; i++) {\r\n                        addressStringBuilder += (address[i] + \" \");\r\n                    }\r\n\r\n                    addressStringBuilder += address[0];\r\n\r\n                    setAddress(addressStringBuilder);\r\n                } else {\r\n                    setAddress(address);\r\n                }\r\n            } catch\r\n                (error) {\r\n                console.log(error);\r\n                setAddress(\"Kunne ikke finne addressen...\");\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sends user to RegisterChargerPage and passes relevant parameters\r\n     * to be parsed from URL.\r\n     * @return void\r\n     * @memberOf RegisterChargerMapPage\r\n     */\r\n    const selectAddress = () => {\r\n        history.push(`/registercharger/${position[0]}/${position[1]}/${address}`)\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <h1 style={{textAlign: \"center\"}} className={\"laddelGreen\"}>Legg til nytt ladepunkt</h1>\r\n            <AddressSearchBar callback={(e) => submitAddressSearchBar(e)}\r\n            />\r\n            <div className=\"map\">\r\n                <MapContainer center={position} scrollWheelZoom={true}>\r\n                    <TileLayer\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    <MapConsumer>\r\n                        {(map) => {\r\n                            map.setView(position, zoom);\r\n                            return null;\r\n                        }}\r\n                    </MapConsumer>\r\n                    <AddressSelectorMarker position={position} address={address}\r\n                        // Reverse GeoCode (Convert latitude and longitutde to address)\r\n                                           dragend={(e) => dragend(e)}\r\n                                           callback={() => selectAddress()}\r\n                    />\r\n\r\n                </MapContainer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst containsNumber = (string) => {\r\n    return /\\d/.test(string);\r\n}\r\n\r\nexport default RegisterChargerMapPage;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Svenn\\xE6rn\\\\Desktop\\\\laddel-mvp\\\\frontend\\\\src\\\\components\\\\StartChargerOverlay.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport Overlay from \"./Overlay\";\nimport '../stylesheets/StartChargerOverlay.css';\nimport TimeSelector from \"./TimeSelector\";\nimport ChargerButton from \"./ChargerButton\";\nimport { useEffect, useState } from \"react\";\nimport getChargerOperatingMode from \"../services/charger/getChargerOperatingMode\";\nimport { STATES } from \"../misc/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar StartChargerOverlay = function StartChargerOverlay(_ref) {\n  _s();\n\n  var address = _ref.address,\n      chargerId = _ref.chargerId,\n      onClickClose = _ref.onClickClose;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      operatingMode = _useState2[0],\n      setOperatingMode = _useState2[1];\n\n  var updateOperatingMode = function updateOperatingMode() {\n    getChargerOperatingMode(chargerId).then(function (x) {\n      setOperatingMode(x.data.operatingMode);\n    }).catch(function () {\n      setOperatingMode(STATES.ERROR);\n    });\n  };\n\n  useEffect(function () {\n    updateOperatingMode();\n    setTimeout(function () {\n      updateOperatingMode();\n    }, 10000);\n  }, [operatingMode]);\n  return /*#__PURE__*/_jsxDEV(Overlay, {\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        justifyContent: \"space-evenly\"\n      },\n      className: \"centerFlex startChargerOverlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: function onClick() {\n          return onClickClose();\n        },\n        className: \"close\",\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Start lading ved \", address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"laddelGreen\",\n          children: \"Lad til\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(TimeSelector, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(ChargerButton, {\n        operatingMode: operatingMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(StartChargerOverlay, \"TsHjUM8Cp5DOkv5jtzmpFHazaQc=\");\n\n_c = StartChargerOverlay;\nexport default StartChargerOverlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartChargerOverlay\");","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/components/StartChargerOverlay.js"],"names":["Overlay","TimeSelector","ChargerButton","useEffect","useState","getChargerOperatingMode","STATES","StartChargerOverlay","address","chargerId","onClickClose","operatingMode","setOperatingMode","updateOperatingMode","then","x","data","catch","ERROR","setTimeout","justifyContent","width"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAO,wCAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,uBAAP,MAAoC,6CAApC;AACA,SAAQC,MAAR,QAAqB,mBAArB;;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAwC;AAAA;;AAAA,MAAtCC,OAAsC,QAAtCA,OAAsC;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,YAAkB,QAAlBA,YAAkB;;AAEhE,kBAA0CN,QAAQ,CAAC,CAAD,CAAlD;AAAA;AAAA,MAAOO,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9BR,IAAAA,uBAAuB,CAACI,SAAD,CAAvB,CAAmCK,IAAnC,CAAwC,UAAAC,CAAC,EAAI;AACzCH,MAAAA,gBAAgB,CAACG,CAAC,CAACC,IAAF,CAAOL,aAAR,CAAhB;AACH,KAFD,EAEGM,KAFH,CAES,YAAM;AACXL,MAAAA,gBAAgB,CAACN,MAAM,CAACY,KAAR,CAAhB;AACH,KAJD;AAKH,GAND;;AAQAf,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,mBAAmB;AACnBM,IAAAA,UAAU,CAAC,YAAM;AACbN,MAAAA,mBAAmB;AACtB,KAFS,EAEP,KAFO,CAAV;AAGH,GALQ,EAKN,CAACF,aAAD,CALM,CAAT;AAOA,sBACI,QAAC,OAAD;AAAS,IAAA,OAAO,eACZ;AAAK,MAAA,KAAK,EAAE;AAACS,QAAAA,cAAc,EAAE;AAAjB,OAAZ;AAA8C,MAAA,SAAS,EAAC,gCAAxD;AAAA,8BACI;AAAM,QAAA,OAAO,EAAE;AAAA,iBAAMV,YAAY,EAAlB;AAAA,SAAf;AAAqC,QAAA,SAAS,EAAC,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AAAA,wCAAsBF,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,eAGI;AAAK,QAAA,KAAK,EAAE;AAACa,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAAA,gCACI;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,iBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,eAOI,QAAC,aAAD;AAAe,QAAA,aAAa,EAAEV;AAA9B;AAAA;AAAA;AAAA;AAAA,eAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAaH,CAhCD;;GAAMJ,mB;;KAAAA,mB;AAkCN,eAAeA,mBAAf","sourcesContent":["import Overlay from \"./Overlay\";\r\nimport '../stylesheets/StartChargerOverlay.css';\r\nimport TimeSelector from \"./TimeSelector\";\r\nimport ChargerButton from \"./ChargerButton\";\r\nimport {useEffect, useState} from \"react\";\r\nimport getChargerOperatingMode from \"../services/charger/getChargerOperatingMode\";\r\nimport {STATES} from \"../misc/constants\";\r\n\r\nconst StartChargerOverlay = ({address, chargerId, onClickClose}) => {\r\n\r\n    const [operatingMode, setOperatingMode] = useState(0);\r\n\r\n    const updateOperatingMode = () => {\r\n        getChargerOperatingMode(chargerId).then(x => {\r\n            setOperatingMode(x.data.operatingMode);\r\n        }).catch(() => {\r\n            setOperatingMode(STATES.ERROR);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateOperatingMode();\r\n        setTimeout(() => {\r\n            updateOperatingMode();\r\n        }, 10000);\r\n    }, [operatingMode]);\r\n\r\n    return (\r\n        <Overlay content={\r\n            <div style={{justifyContent: \"space-evenly\"}} className=\"centerFlex startChargerOverlay\">\r\n                <span onClick={() => onClickClose()} className=\"close\">x</span>\r\n                <h3>Start lading ved {address}</h3>\r\n                <div style={{width: \"100%\"}}>\r\n                    <h3 className=\"laddelGreen\">Lad til</h3>\r\n                    <TimeSelector/>\r\n                </div>\r\n                <ChargerButton operatingMode={operatingMode}/>\r\n            </div>\r\n        }/>\r\n    )\r\n}\r\n\r\nexport default StartChargerOverlay;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\r\n * @author Magnus & Sven\r\n *\r\n * Service for various operations relating to time.\r\n */\n\n/**\r\n * Converts a date object to a HHMM string.\r\n *\r\n * @param time the date object\r\n * @returns {`${string}:${string}`}\r\n */\nvar UTCToLocalTime = function UTCToLocalTime(date) {\n  console.log(date);\n  console.log(addMinutes(date, 0));\n  return addMinutes(date, -date.getTimezoneOffset());\n};\n\n_c = UTCToLocalTime;\n\nvar dateToHHMM = function dateToHHMM(time) {\n  var hours = time.getHours() > 9 ? \"\".concat(time.getHours()) : \"0\".concat(time.getHours());\n  var minutes = time.getMinutes() > 9 ? \"\".concat(time.getMinutes()) : \"0\".concat(time.getMinutes());\n  return \"\".concat(hours, \":\").concat(minutes);\n};\n\nvar interval;\n/**\r\n * Periodically compares time with now time and calls callback if time is older than now time\r\n *\r\n * @param time the object that will be compared with now time\r\n * @param callback the callback\r\n *\r\n * @returns {void}\r\n */\n\nvar pollTime = function pollTime(time, callback) {\n  if (interval != null) clearInterval(interval);\n  interval = setInterval(function () {\n    var now = new Date();\n\n    if (now > time) {\n      callback(new Date());\n    }\n  }, 1000);\n};\n/**\r\n * Stops pollTime\r\n *\r\n * @returns {void}\r\n */\n\n\nvar stopPolling = function stopPolling() {\n  if (interval != null) clearInterval(interval);\n  interval = null;\n};\n/**\r\n * Converts a single digit number to a double digit number (eg. 9 -> 09)\r\n *\r\n * @param n the number to be converted\r\n * @return {string}\r\n */\n\n\nvar nToNN = function nToNN(n) {\n  return n > 9 ? \"\".concat(n) : \"0\".concat(n);\n};\n/**\r\n * Adds minutes to a date object\r\n *\r\n * @param date the date object\r\n * @param minutes number of minutes\r\n * @return {Date}\r\n */\n\n\nvar addMinutes = function addMinutes(date, minutes) {\n  return new Date(date.getTime() + minutes * 60000);\n};\n/**\r\n * Adds hours to a date object\r\n *\r\n * @param date the date object\r\n * @param hours number of hours\r\n * @return {Date}\r\n */\n\n\nvar addHours = function addHours(date, hours) {\n  var now = new Date();\n  var newDate = new Date(date.getTime() + hours * 3600000);\n\n  if (newDate < now) {\n    return now;\n  }\n\n  return newDate;\n};\n\nexport { addMinutes, addHours, dateToHHMM, nToNN, pollTime, UTCToLocalTime };\n\nvar _c;\n\n$RefreshReg$(_c, \"UTCToLocalTime\");","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/services/time/timeService.js"],"names":["UTCToLocalTime","date","console","log","addMinutes","getTimezoneOffset","dateToHHMM","time","hours","getHours","minutes","getMinutes","interval","pollTime","callback","clearInterval","setInterval","now","Date","stopPolling","nToNN","n","getTime","addHours","newDate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,UAAU,CAACH,IAAD,EAAO,CAAP,CAAtB;AACA,SAAOG,UAAU,CAACH,IAAD,EAAO,CAACA,IAAI,CAACI,iBAAL,EAAR,CAAjB;AACH,CAJD;;KAAML,c;;AAMN,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AACzB,MAAMC,KAAK,GAAGD,IAAI,CAACE,QAAL,KAAkB,CAAlB,aAAyBF,IAAI,CAACE,QAAL,EAAzB,eAAiDF,IAAI,CAACE,QAAL,EAAjD,CAAd;AACA,MAAMC,OAAO,GAAGH,IAAI,CAACI,UAAL,KAAoB,CAApB,aAA2BJ,IAAI,CAACI,UAAL,EAA3B,eAAqDJ,IAAI,CAACI,UAAL,EAArD,CAAhB;AACA,mBAAUH,KAAV,cAAmBE,OAAnB;AACH,CAJD;;AAMA,IAAIE,QAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACN,IAAD,EAAOO,QAAP,EAAoB;AACjC,MAAGF,QAAQ,IAAI,IAAf,EAAqBG,aAAa,CAACH,QAAD,CAAb;AACrBA,EAAAA,QAAQ,GAAGI,WAAW,CAAC,YAAM;AACzB,QAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AACA,QAAGD,GAAG,GAAGV,IAAT,EAAe;AACXO,MAAAA,QAAQ,CAAC,IAAII,IAAJ,EAAD,CAAR;AACH;AACJ,GALqB,EAKnB,IALmB,CAAtB;AAMH,CARD;AAUA;AACA;AACA;AACA;AACA;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,MAAGP,QAAQ,IAAI,IAAf,EAAqBG,aAAa,CAACH,QAAD,CAAb;AACrBA,EAAAA,QAAQ,GAAG,IAAX;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMQ,KAAK,GAAG,SAARA,KAAQ,CAACC,CAAD,EAAO;AACjB,SAAQA,CAAC,GAAG,CAAJ,aAAWA,CAAX,eAAqBA,CAArB,CAAR;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMjB,UAAU,GAAG,SAAbA,UAAa,CAACH,IAAD,EAAOS,OAAP,EAAmB;AAElC,SAAO,IAAIQ,IAAJ,CAASjB,IAAI,CAACqB,OAAL,KAAiBZ,OAAO,GAAC,KAAlC,CAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMa,QAAQ,GAAG,SAAXA,QAAW,CAACtB,IAAD,EAAOO,KAAP,EAAiB;AAE9B,MAAMS,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AAEA,MAAMM,OAAO,GAAG,IAAIN,IAAJ,CAASjB,IAAI,CAACqB,OAAL,KAAiBd,KAAK,GAAC,OAAhC,CAAhB;;AAEA,MAAIgB,OAAO,GAAGP,GAAd,EAAmB;AACf,WAAOA,GAAP;AACH;;AACD,SAAOO,OAAP;AACH,CAVD;;AAYA,SAAQpB,UAAR,EAAoBmB,QAApB,EAA8BjB,UAA9B,EAA0Cc,KAA1C,EAAiDP,QAAjD,EAA2Db,cAA3D","sourcesContent":["/**\r\n * @author Magnus & Sven\r\n *\r\n * Service for various operations relating to time.\r\n */\r\n\r\n/**\r\n * Converts a date object to a HHMM string.\r\n *\r\n * @param time the date object\r\n * @returns {`${string}:${string}`}\r\n */\r\n\r\nconst UTCToLocalTime = (date) => {\r\n    console.log(date);\r\n    console.log(addMinutes(date, 0))\r\n    return addMinutes(date, -date.getTimezoneOffset());\r\n}\r\n\r\nconst dateToHHMM = (time) => {\r\n    const hours = time.getHours() > 9 ? `${time.getHours()}` : `0${time.getHours()}`;\r\n    const minutes = time.getMinutes() > 9 ? `${time.getMinutes()}` : `0${time.getMinutes()}`;\r\n    return `${hours}:${minutes}`;\r\n}\r\n\r\nlet interval;\r\n\r\n/**\r\n * Periodically compares time with now time and calls callback if time is older than now time\r\n *\r\n * @param time the object that will be compared with now time\r\n * @param callback the callback\r\n *\r\n * @returns {void}\r\n */\r\n\r\nconst pollTime = (time, callback) => {\r\n    if(interval != null) clearInterval(interval);\r\n    interval = setInterval(() => {\r\n        const now = new Date();\r\n        if(now > time) {\r\n            callback(new Date());\r\n        }\r\n    }, 1000);\r\n}\r\n\r\n/**\r\n * Stops pollTime\r\n *\r\n * @returns {void}\r\n */\r\n\r\nconst stopPolling = () => {\r\n    if(interval != null) clearInterval(interval);\r\n    interval = null;\r\n}\r\n\r\n/**\r\n * Converts a single digit number to a double digit number (eg. 9 -> 09)\r\n *\r\n * @param n the number to be converted\r\n * @return {string}\r\n */\r\n\r\nconst nToNN = (n) => {\r\n    return (n > 9 ? `${n}` : `0${n}`);\r\n}\r\n\r\n/**\r\n * Adds minutes to a date object\r\n *\r\n * @param date the date object\r\n * @param minutes number of minutes\r\n * @return {Date}\r\n */\r\n\r\nconst addMinutes = (date, minutes) => {\r\n\r\n    return new Date(date.getTime() + minutes*60000);\r\n}\r\n\r\n/**\r\n * Adds hours to a date object\r\n *\r\n * @param date the date object\r\n * @param hours number of hours\r\n * @return {Date}\r\n */\r\n\r\nconst addHours = (date, hours) => {\r\n\r\n    const now = new Date();\r\n\r\n    const newDate = new Date(date.getTime() + hours*3600000);\r\n\r\n    if (newDate < now) {\r\n        return now;\r\n    }\r\n    return newDate;\r\n}\r\n\r\nexport {addMinutes, addHours, dateToHHMM, nToNN, pollTime, UTCToLocalTime};"]},"metadata":{},"sourceType":"module"}
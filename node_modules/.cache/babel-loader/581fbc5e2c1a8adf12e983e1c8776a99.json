{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @author Sven\r\n * Denne klassen skal håndtere api-kall\r\n */\nvar axios = require('axios');\n/**\r\n * Sender en asynkron POST til url'en og kjører callback med dataen og eventuelt error\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @param callback callback funksjonen med data fra tjeneren\r\n */\n\n\nvar doPostAsync = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, data, headers) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              axios({\n                method: 'post',\n                url: url,\n                data: data == null ? {} : data,\n                timeout: 1000 * 15,\n                headers: headers == null ? {} : headers\n              }).then(function (x) {\n                resolve(x);\n              }).catch(function (error) {\n                reject(error);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function doPostAsync(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\r\n * Sender en POST til URL'en\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @returns svar fra tjeneren i tekst\r\n */\n\n\nvar doPost = function doPost(url, data, headers) {\n  axios({\n    method: 'post',\n    url: url,\n    timeout: 1000 * 15,\n    data: data == null ? {} : data,\n    headers: headers == null ? {} : headers\n  }).then(function (response) {\n    return response;\n  }, function (error) {\n    return error;\n  });\n};\n/**\r\n * Sender en asynkron GET til URL'en\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @param callback callback funksjonen med data fra tjeneren\r\n */\n\n\nvar doGetAsync = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, data, headers, callback) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios({\n              method: 'get',\n              url: url,\n              data: data,\n              timeout: 1000 * 15,\n              headers: headers\n            }).then(function (response) {\n              callback(response, null);\n            }, function (error) {\n              callback(null, error);\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function doGetAsync(_x4, _x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\r\n * Sender en GET til URL'en\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @returns svar fra tjeneren i tekst\r\n */\n\n\nvar doGet = function doGet(url, data, headers) {\n  axios({\n    method: 'get',\n    url: url,\n    timeout: 1000 * 15,\n    data: data,\n    headers: headers\n  }).then(function (response) {\n    return response;\n  }, function (error) {\n    return error;\n  });\n};\n\nexport { doGet, doPost, doGetAsync, doPostAsync };","map":{"version":3,"sources":["C:/Users/Svennærn/Desktop/laddel-mvp/frontend/src/services/api.js"],"names":["axios","require","doPostAsync","url","data","headers","Promise","resolve","reject","method","timeout","then","x","catch","error","doPost","response","doGetAsync","callback","doGet"],"mappings":"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","sourcesContent":["/**\r\n * @author Sven\r\n * Denne klassen skal håndtere api-kall\r\n */\r\nconst axios = require('axios');\r\n\r\n/**\r\n * Sender en asynkron POST til url'en og kjører callback med dataen og eventuelt error\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @param callback callback funksjonen med data fra tjeneren\r\n */\r\nconst doPostAsync = async (url, data, headers) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios({\r\n            method: 'post',\r\n            url: url,\r\n            data: data == null ? {} : data,\r\n            timeout: 1000 * 15,\r\n            headers: headers == null ? {} : headers\r\n        }).then(x => {\r\n            resolve(x);\r\n        }).catch(error => {\r\n            reject(error);\r\n        });\r\n    })\r\n}\r\n\r\n/**\r\n * Sender en POST til URL'en\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @returns svar fra tjeneren i tekst\r\n */\r\nconst doPost = (url, data, headers) => {\r\n    axios({\r\n        method: 'post',\r\n        url: url,\r\n        timeout: 1000 * 15,\r\n        data: data == null ? {} : data,\r\n        headers: headers == null ? {} : headers\r\n    }).then((response) => {\r\n        return response;\r\n    }, (error) => {\r\n        return error;\r\n    });\r\n}\r\n\r\n/**\r\n * Sender en asynkron GET til URL'en\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @param callback callback funksjonen med data fra tjeneren\r\n */\r\n\r\nconst doGetAsync = async (url, data, headers, callback) => {\r\n    await axios({\r\n        method: 'get',\r\n        url: url,\r\n        data: data,\r\n        timeout: 1000 * 15,\r\n        headers: headers,\r\n    }).then((response) => {\r\n        callback(response, null);\r\n    }, (error) => {\r\n        callback(null, error);\r\n    });\r\n}\r\n\r\n/**\r\n * Sender en GET til URL'en\r\n * @param url URL'en til mottaker\r\n * @param data dataen som skal sendes\r\n * @param headers headere til requesten\r\n * @returns svar fra tjeneren i tekst\r\n */\r\nconst doGet = (url, data, headers) => {\r\n    axios({\r\n        method: 'get',\r\n        url: url,\r\n        timeout: 1000 * 15,\r\n        data: data,\r\n        headers: headers\r\n    }).then((response) => {\r\n        return response;\r\n    }, (error) => {\r\n        return error;\r\n    });\r\n}\r\n\r\nexport  {doGet, doPost,doGetAsync, doPostAsync}"]},"metadata":{},"sourceType":"module"}
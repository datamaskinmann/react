{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Svenn\\xE6rn/Desktop/laddel-mvp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getChargerState } from \"./checkChargerStateService\";\nimport getChargerOperatingMode from \"./getChargerOperatingMode\";\n/**\r\n * @author Sven\r\n * Service for polling av status til ladestasjoner.\r\n */\n\nvar pollingTimeout = null;\nvar selectedId = -1;\nvar doPoll;\n/**\r\n * Kaller doPoll() uten ventetid.\r\n *\r\n * @returns {void}\r\n */\n\nvar invokePoll = function invokePoll() {\n  doPoll();\n};\n/**\r\n * Metoden kommuniserer med backend.\r\n * Kaller callback med operating mode fra backend.\r\n *\r\n * @param pollingId ID til lader\r\n * @param callback Funksjon som skal kalles\r\n */\n\n\nvar pollNew = function pollNew(pollingId, callback) {\n  clearTimeout(pollingTimeout);\n\n  doPoll = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              selectedId = pollingId;\n              callback(0);\n              _context.next = 4;\n              return getChargerOperatingMode(pollingId).then(function (x) {\n                callback(x);\n              }).catch(function (e) {\n                callback(-1);\n              });\n\n            case 4:\n              pollingTimeout = setTimeout(doPoll, 10000);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function doPoll() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  doPoll();\n};\n\nexport { pollNew, selectedId, invokePoll };","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/laddel-mvp/frontend/src/services/charger/chargingStatePollingService.js"],"names":["getChargerState","getChargerOperatingMode","pollingTimeout","selectedId","doPoll","invokePoll","pollNew","pollingId","callback","clearTimeout","then","x","catch","e","setTimeout"],"mappings":";;AAAA,SAAQA,eAAR,QAA8B,4BAA9B;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAG,IAArB;AACA,IAAIC,UAAU,GAAG,CAAC,CAAlB;AACA,IAAIC,MAAJ;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBD,EAAAA,MAAM;AACT,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD,EAAYC,QAAZ,EAAyB;AACrCC,EAAAA,YAAY,CAACP,cAAD,CAAZ;;AACIE,EAAAA,MAAM;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AACLD,cAAAA,UAAU,GAAGI,SAAb;AACAC,cAAAA,QAAQ,CAAC,CAAD,CAAR;AAFK;AAAA,qBAGCP,uBAAuB,CAACM,SAAD,CAAvB,CAAmCG,IAAnC,CAAwC,UAAAC,CAAC,EAAI;AAC/CH,gBAAAA,QAAQ,CAACG,CAAD,CAAR;AACH,eAFK,EAEHC,KAFG,CAEG,UAAAC,CAAC,EAAI;AACVL,gBAAAA,QAAQ,CAAC,CAAC,CAAF,CAAR;AACH,eAJK,CAHD;;AAAA;AAQLN,cAAAA,cAAc,GAAGY,UAAU,CAACV,MAAD,EAAS,KAAT,CAA3B;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA;AAAA;AAAA;AAAA,KAAN;;AAUJA,EAAAA,MAAM;AACT,CAbD;;AAeA,SAAQE,OAAR,EAAiBH,UAAjB,EAA6BE,UAA7B","sourcesContent":["import {getChargerState} from \"./checkChargerStateService\";\r\nimport getChargerOperatingMode from \"./getChargerOperatingMode\";\r\n\r\n/**\r\n * @author Sven\r\n * Service for polling av status til ladestasjoner.\r\n */\r\n\r\nlet pollingTimeout = null;\r\nvar selectedId = -1;\r\nlet doPoll;\r\n\r\n/**\r\n * Kaller doPoll() uten ventetid.\r\n *\r\n * @returns {void}\r\n */\r\nconst invokePoll = () => {\r\n    doPoll();\r\n}\r\n\r\n/**\r\n * Metoden kommuniserer med backend.\r\n * Kaller callback med operating mode fra backend.\r\n *\r\n * @param pollingId ID til lader\r\n * @param callback Funksjon som skal kalles\r\n */\r\nconst pollNew = (pollingId, callback) => {\r\n    clearTimeout(pollingTimeout);\r\n        doPoll = async () => {\r\n            selectedId = pollingId;\r\n            callback(0);\r\n            await getChargerOperatingMode(pollingId).then(x => {\r\n                callback(x);\r\n            }).catch(e => {\r\n                callback(-1);\r\n            });\r\n            pollingTimeout = setTimeout(doPoll, 10000);\r\n    }\r\n    doPoll();\r\n}\r\n\r\nexport {pollNew, selectedId, invokePoll};"]},"metadata":{},"sourceType":"module"}
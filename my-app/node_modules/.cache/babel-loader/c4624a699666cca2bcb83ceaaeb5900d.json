{"ast":null,"code":"import { createStore } from 'redux';\n/**\r\n * This is a reducer - a function that takes a current state value and an\r\n * action object describing \"what happened\", and returns a new state value.\r\n * A reducer's function signature is: (state, action) => newState\r\n *\r\n * The Redux state should contain only plain JS objects, arrays, and primitives.\r\n * The root state value is usually an object.  It's important that you should\r\n * not mutate the state object, but return a new object if the state changes.\r\n *\r\n * You can use any conditional logic you want in a reducer. In this example,\r\n * we use a switch statement, but it's not required.\r\n */\n\nfunction counterReducer(state = {\n  value: 0\n}, action) {\n  switch (action.type) {\n    case 'counter/incremented':\n      return {\n        value: state.value + 1\n      };\n\n    case 'counter/decremented':\n      return {\n        value: state.value - 1\n      };\n\n    default:\n      return state;\n  }\n} // Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\n\n\nlet store = createStore(counterReducer); // You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\nstore.subscribe(() => console.log(store.getState())); // The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\n\nstore.dispatch({\n  type: 'counter/incremented'\n}); // {value: 1}\n\nstore.dispatch({\n  type: 'counter/incremented'\n}); // {value: 2}\n\nstore.dispatch({\n  type: 'counter/decremented'\n}); // {value: 1}\n\nexport default store;","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/reactTesting/my-app/src/Contexts/SessionContext.js"],"names":["createStore","counterReducer","state","value","action","type","store","subscribe","console","log","getState","dispatch"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAhC,EAA8CC,MAA9C,EAAsD;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,qBAAL;AACI,aAAO;AAAEF,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAP;;AACJ,SAAK,qBAAL;AACI,aAAO;AAAEA,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAP;;AACJ;AACI,aAAOD,KAAP;AANR;AAQH,C,CAED;AACA;;;AACA,IAAII,KAAK,GAAGN,WAAW,CAACC,cAAD,CAAvB,C,CAEA;AACA;AACA;;AAEAK,KAAK,CAACC,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAAtB,E,CAEA;AACA;;AACAJ,KAAK,CAACK,QAAN,CAAe;AAAEN,EAAAA,IAAI,EAAE;AAAR,CAAf,E,CACA;;AACAC,KAAK,CAACK,QAAN,CAAe;AAAEN,EAAAA,IAAI,EAAE;AAAR,CAAf,E,CACA;;AACAC,KAAK,CAACK,QAAN,CAAe;AAAEN,EAAAA,IAAI,EAAE;AAAR,CAAf,E,CACA;;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore } from 'redux'\r\n\r\n/**\r\n * This is a reducer - a function that takes a current state value and an\r\n * action object describing \"what happened\", and returns a new state value.\r\n * A reducer's function signature is: (state, action) => newState\r\n *\r\n * The Redux state should contain only plain JS objects, arrays, and primitives.\r\n * The root state value is usually an object.  It's important that you should\r\n * not mutate the state object, but return a new object if the state changes.\r\n *\r\n * You can use any conditional logic you want in a reducer. In this example,\r\n * we use a switch statement, but it's not required.\r\n */\r\nfunction counterReducer(state = { value: 0 }, action) {\r\n    switch (action.type) {\r\n        case 'counter/incremented':\r\n            return { value: state.value + 1 }\r\n        case 'counter/decremented':\r\n            return { value: state.value - 1 }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Create a Redux store holding the state of your app.\r\n// Its API is { subscribe, dispatch, getState }.\r\nlet store = createStore(counterReducer)\r\n\r\n// You can use subscribe() to update the UI in response to state changes.\r\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\r\n// There may be additional use cases where it's helpful to subscribe as well.\r\n\r\nstore.subscribe(() => console.log(store.getState()))\r\n\r\n// The only way to mutate the internal state is to dispatch an action.\r\n// The actions can be serialized, logged or stored and later replayed.\r\nstore.dispatch({ type: 'counter/incremented' })\r\n// {value: 1}\r\nstore.dispatch({ type: 'counter/incremented' })\r\n// {value: 2}\r\nstore.dispatch({ type: 'counter/decremented' })\r\n// {value: 1}\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}
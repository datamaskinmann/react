{"ast":null,"code":"import { createStore } from 'redux';\n/**\r\n * This is a reducer - a function that takes a current state value and an\r\n * action object describing \"what happened\", and returns a new state value.\r\n * A reducer's function signature is: (state, action) => newState\r\n *\r\n * The Redux state should contain only plain JS objects, arrays, and primitives.\r\n * The root state value is usually an object.  It's important that you should\r\n * not mutate the state object, but return a new object if the state changes.\r\n *\r\n * You can use any conditional logic you want in a reducer. In this example,\r\n * we use a switch statement, but it's not required.\r\n */\n\nfunction counterReducer(state = {\n  value: 0,\n  test: 1\n}, action) {\n  switch (action.type) {\n    case 'counter/incremented':\n      return {\n        value: state.value + 1\n      };\n\n    case 'counter/decremented':\n      return {\n        value: state.value - 1\n      };\n\n    default:\n      return state;\n  }\n}\n\nlet store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["C:/Users/SvennÃ¦rn/Desktop/reactTesting/my-app/src/Contexts/SessionContext.js"],"names":["createStore","counterReducer","state","value","test","action","type","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAAhC,EAAuDC,MAAvD,EAA+D;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,qBAAL;AACI,aAAO;AAAEH,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAP;;AACJ,SAAK,qBAAL;AACI,aAAO;AAAEA,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAP;;AACJ;AACI,aAAOD,KAAP;AANR;AAQH;;AAED,IAAIK,KAAK,GAAGP,WAAW,CAACC,cAAD,CAAvB;AAGA,eAAeM,KAAf","sourcesContent":["import { createStore } from 'redux'\r\n\r\n/**\r\n * This is a reducer - a function that takes a current state value and an\r\n * action object describing \"what happened\", and returns a new state value.\r\n * A reducer's function signature is: (state, action) => newState\r\n *\r\n * The Redux state should contain only plain JS objects, arrays, and primitives.\r\n * The root state value is usually an object.  It's important that you should\r\n * not mutate the state object, but return a new object if the state changes.\r\n *\r\n * You can use any conditional logic you want in a reducer. In this example,\r\n * we use a switch statement, but it's not required.\r\n */\r\nfunction counterReducer(state = { value: 0, test: 1 }, action) {\r\n    switch (action.type) {\r\n        case 'counter/incremented':\r\n            return { value: state.value + 1 }\r\n        case 'counter/decremented':\r\n            return { value: state.value - 1 }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet store = createStore(counterReducer)\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}